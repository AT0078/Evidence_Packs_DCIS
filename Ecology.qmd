---
title: "Ecology"
format:
  html:
    theme: flatly
    toc: true
    toc-depth: 3
    toc-location: right
    number-sections: false
    callout-icon: false
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(message=FALSE,warning=FALSE, echo=FALSE, cache=TRUE)
```

::: callout-warning
## This page is under construction
:::

```{css}
.dataTables_wrapper {
  max-height: 350px;
  overflow-y: auto;
}

.dataTables_wrapper table {
font-size: 11px;
}
```

Ecology is the centerpiece of our action on rivers, the Water Framework Directive is centered on achieving "Good Ecological Status" with all measures targeting improvements in ecology.

For catchment management and river restoration to be effective, measures must benefit ecology. Without a clear line-of-sight between how a measure will have a positive ecological impact, the success of the impact and the investment into this is of limited value.

### WFD Ecological Overall Status

Ecological status classifications can be composed of up to four different assessments:

-   An assessment of status indicated by a biological quality element such as fish, invertebrates or algae. We also assess for the presence of invasive species as a separate test.

-   An assessment of compliance with environmental standards for supporting physico-chemical conditions, such as dissolved oxygen, phosphorus or ammonia.

-   An assessment of compliance with environmental standards for concentrations of specific pollutants, such as zinc, cypermethrin or arsenic (these are known as 'Annex VIII' substances).

The lowest score in a waterbody for the above items is adopted as the "Ecological Overall" classification for that waterbody.

------------------------------------------------------------------------

```{r }
#| label: the general cps & cat

library(sf)
library(magrittr)
library(tidyverse)
library(leaflet)
library(lubridate)


source("Catch_Set_Up.R")
```

```{r CDE text}


# Load your data
CDE <- read.csv("/dbfs/mnt/lab/unrestricted/harry.gray@environment-agency.gov.uk/CEP/WFD_Wessex_2024.csv")

CDE %<>% 
  filter(Operational.Catchment == unique(CAT$OPCAT_NAME)) %>% 
  inner_join(CAT_geo, ., by = c("WB_ID" = "Water.Body.ID"))

# 2022 map
CDE_e_2022 <- CDE %>% 
  filter(Classification.Item == "Biological quality elements" & 
         Year == "2022")

# 2019 map
CDE_e_2019 <- CDE %>% 
  filter(Classification.Item == "Biological quality elements" & 
         Year == "2019" & Cycle == "3")

#test
```

In the 2022 interim WFD classification for the `r unique(CAT$OPCAT_NAME)` saw `r round(((table(CDE_e_2022$Status)[[1]][1]/length(unique(CDE_e_2022$Water.Body)))*100),0)`% of waterbodies achieved *`r row.names(table(CDE_e_2022$Status))[1]`*, whilst `r round(((table(CDE_e_2022$Status)[[2]][1]/length(unique(CDE_e_2022$Water.Body)))*100),0)`% of waterbodies achieved *`r row.names(table(CDE_e_2022$Status))[2]`*, and `r round(((table(CDE_e_2022$Status)[[3]][1]/length(unique(CDE_e_2022$Water.Body)))*100),0)`% of waterbodies achieved *`r row.names(table(CDE_e_2022$Status))[3]`*.

In comparison, the 2019 WFD classification saw `r  round(((table(CDE_e_2019$Status)[[1]][1]/length(unique(CDE_e_2019$Water.Body)))*100),0)`% at *`r row.names(table(CDE_e_2019$Status))[1]`*, with `r round(((table(CDE_e_2019$Status)[[2]][1]/length(unique(CDE_e_2019$Water.Body)))*100),0)`% at *`r   row.names(table(CDE_e_2019$Status))[2]`*, and `r round(((table(CDE_e_2019$Status)[[3]][1]/length(unique(CDE_e_2019$Water.Body)))*100),0)`% at *`r row.names(table(CDE_e_2019$Status))[3]`*.

```{r}
#| label: Ecological Overall CDE Map

library(leaflet)
library(dplyr)
library(magrittr)


# Define palette
pal <- colorFactor(
  palette = c("green", "seagreen", "seagreen", "yellow", "orange", "#b71105", "red"),
  levels = c("High", "Good", "Supports Good", "Moderate", "Bad", "Poor", "Fail"),
  na.color = "transparent"
)

CDE_e_2015 <- CDE %>% 
  filter(Classification.Item == "Ecological Overall" & 
         Year == "2015")#& Cycle == "3")


 leaflet() %>% 
  addProviderTiles(providers$Esri,
                  group = "Esri Basemap") %>% 
  addPolygons(data= CDE_e_2022,
              color = "black",
              weight = 0.5,
              fillOpacity = 1,
              fillColor = ~pal(Status),
              popup= ~Water.Body,
              group = "2022 Status") %>% 
  addPolygons(data= CDE_e_2019,
              color = "black",
              weight = 0.5,
              fillOpacity = 1,
              fillColor = ~pal(Status),
              popup= ~Water.Body,
              group = "2019 Status") %>% 
  addPolygons(data= CDE_e_2015,
              color = "black",
              weight = 0.5,
              fillOpacity = 1,
              fillColor = ~pal(Status),
              popup= ~Water.Body,
              group = "2015 Status") %>% 
   addLegend(opacity = 0.9, 
            pal = pal,
            values = CDE_e_2022$Status,
            title = paste0(unique(CDE_e_2022$Classification.Item),
                           "<br> WFD Status")) %>%        
  addLayersControl(baseGroups = c( "2022 Status",
              "2019 Status",
              "2015 Status"),
                   overlayGroups = c(
             "Esri Basemap"),
                   position = "topright",
                   options= layersControlOptions(collapsed=FALSE)) %>% 
  hideGroup(c("2019 Status",
              "2015 Status",
              "Esri Basemap")) 






```

### Reasons for Not Achieving Good

:::{.callout-tip icon=true}
Use the below 'Search' box to to search for a waterbody or classification element and scroll through RNAGs and Measures. Click the 'Excel' button to download a spreadsheet.
:::

:::{.column-body-outset}
```{r RNAGS}

# Filter for just Phys-chem elements



RNAG <- RFF %>%  filter(
                           CLASS_ITEM_NAME %in% c("Fish", 
                                              "Invertebrates", 
                                              "Macroalgae", 
                                              "Macrophytes",
                                              "Macrophytes and Phytobenthos Combined",
                                              "Phytoplankton")) %>% 
                           rename(YEAR_RNAG_CREATED= CREATED_DATE,
                                                WFD_YEAR = YEAR) %>% 
                           distinct() %>% 
                           arrange(WATERBODY_ID)           # Arrange dataframe so it appears neater in DT


library(DT)
library(htmlwidgets)

DT::datatable(RNAG[,c(7, 6,18, 32, 16:17,19,20,22:30,23, 10,11,2)],
          class = 'cell-border stripe',
          extensions = c("Buttons","FixedColumns"),
          options = list(
            dom = 'Blfrtip',
            buttons = 'excel',
            initComplete = JS(
    "function(settings, json) {",
    "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});",
    "}"))
    )


```
:::

### Measures to Improve Waterbodies
:::{.column-body-outset}
```{r Measures}
Mes %<>%  filter(WATERBODY_ID %in% unique(RNAG$WATERBODY_ID))

CAT_Mini <- CAT %>% select(WB_NAME, WB_ID) %>% 
  st_drop_geometry()

Mes_Categ <- inner_join(Mes, Measures_Cat, by = "ACTION_UID") %>% 
             inner_join(CAT_Mini, by = c("WATERBODY_ID" = "WB_ID")) %>% 
              filter(!CREATED_DATE== "01/01/1980") %>% 
                arrange(WATERBODY_ID)



   DT::datatable(Mes_Categ[,c(16,3,10,12:14)],
          class = 'cell-border stripe',
          extensions = c("Buttons","FixedColumns"),
          options = list(
            dom = 'Blfrtip',
            buttons = 'excel',
            initComplete = JS(
    "function(settings, json) {",
    "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});",
    "}"))
    )

```
:::

### Ecological Element Classification RNAGs

RNAGs for Ecological Quality Elements are displayed in the map below, they are filtered to show the most recent RNAGs, those which are opaque are \>5 years old and have a creation date of 1st January 2019.

```{r}

# Do we still use this?

CDE_f <- CDE %>% 
  filter(Class.Master.Master == "ECO" & Year == "2022")

  
 # RNAG <- RNAG %>% 
    #           
     #           filter(CREATED_DATE == sort(CREATED_DATE)[length(sort(CREATED_DATE))])# %>%   # We want the most recent creation date for each pressure
   # mutate(
    #           Date = as.Date(ymd_hms(CREATED_DATE))
     #          ) %>% 
             # filter(hydromorph == "not designated artificial or heavily modified") %>%  # I think we should still consider A/HMWBs
            #   group_by(PRESSURE_1) %>%          
    
    #   ungroup()

  
  # Filter RNAGs by CLass_Item so we can toggle them on/off in below plot.
  RNAG_Inv <- RNAG %>% 
                  filter(CLASS_ITEM_NAME == "Invertebrates")
  
  RNAG_Fish <- RNAG %>% 
                  filter(CLASS_ITEM_NAME == "Fish")
    
      RNAG_Macros <- RNAG %>% 
                  filter(CLASS_ITEM_NAME == "Macrophytes and Phytobenthos Combined")
      
         RNAG_DO <- RNAG %>% 
                  filter(CLASS_ITEM_NAME == "Dissolved oxygen")
         
          
            RNAG_Phos <- RNAG %>% 
                  filter(CLASS_ITEM_NAME == "Phosphate")


#            leaflet() %>% 
#  addProviderTiles(providers$Esri) %>% 
#    addPolygons(data=CAT_Union,
#                        color="black",
  #                     weight = 2,
  #                     opacity = 0.99,
  #                     fillColor = NA,
  #                     fillOpacity = 0.00001
    #              ) %>% 
  #  addPolygons(data=RNAG_Inv,
#              color = "black",
 #             weight = 0.5,
 #             fillOpacity = ~ifelse(RNAG_Inv$CREATED_DATE < as.Date("2019-01-01"), 0.2, 0.99),
 #             fillColor = "grey",# ~pal(RNAG_Inv$CLASSIFICATION_NAME),
 #             popup= paste0("RNAG Created: ",RNAG_Inv$CREATED_DATE, "<br>",
 #                           "Element: ", RNAG_Inv$CLASS_ITEM_NAME, "<br>",
  #                          "WB: ",RNAG_Inv$WATERBODY_NAME, "<br> Pressure 1: ",
  #                          RNAG_Inv$PRESSURE_1,
  #                          "<br> Pressure 2: ",
  #                         RNAG_Inv$PRESSURE_NAME_2,
  #                          "<br> Activity: " ,
  #                          RNAG_Inv$ACTIVITY),
  #           group = "Invertebrates RNAGs")%>% 
  #              addLegend(opacity = 0.9, 
  #                       pal = pal,
   #                      values = RNAG_Inv$CLASSIFICATION_NAME,
   #                      title = "RNAG by Ecological Quality Element") 
            
     

```

### WFD Invertebrates Classification

Invertebrates have been used to assess the ecological health of rivers because they acts as biotic indicators for water quality and habitat diversity, whilst unlike fish or macrophytes, their abundance is less impacted by barriers, making them a useful organism to focus on. Species diversity and abundance combined are used to quantify an ecological communities' response to pressures such as water quality, low flows and sediment. They also provide a continuous sample of the above pressures in comparison to spot samples.

```{r Site Level Data load}
#| eval: false

# We need to merge to provide site level WFD classifications with X.Y data which we have in WIMS!
inv <- read.csv("/dbfs/mnt/lab/unrestricted/harry.gray@environment-agency.gov.uk/CEP/Inv_WSX.csv") %>% 
                rename_with(tolower)

inver <- inv %>%
    mutate(
    Date = lubridate::ymd(date),
    Sampled_Date_Amended = lubridate::ymd(replicate_code)
  ) %>% 
  filter(opcat_name == unique(CAT$OPCAT_NAME) & Date >= "2000-01-01")


### Complete waste of time, the site ids aren't the same (melting face)
inver_join <- inver %>% rename(Northing = ngr_prefix, 
                               ngr_prefix = northing) %>% select(2, Northing, easting, 106)

Inv_Site <- Invert_Site %>% inner_join(inver_join, by = c("Site.ID" = "site_id"))
  
  
# Phosphate
  Site_Inv <- Invert_Site %>% filter(Name == "Phosphate")

```

::: {.callout-tip collapse="true" icon="false"}
### Invertebrates

## 2022 WFD WB & Site Classifications
```{r WFD Invert Map}
#| label: Inverts WFD 2022

# Laod WB level 2022 & 2019 data for inverts
CDE_Inv_22 <- CDE %>% 
          filter(Classification.Item == "Invertebrates" & 
                   Year == "2022")


CDE_Inv_19<- CDE %>% 
          filter(Classification.Item == "Invertebrates" & 
                   Year == "2019")


# Load site level 2022 classifications.
Invert_Site <- readxl::read_excel("/dbfs/FileStore/WSX_HGray/2022_C3_River_Invertebrates_Draft_Results_v1.xlsx", sheet = "Site results") %>% 
                    rename_with(make.names) %>% 
                    filter(Site.Area == "Wessex") %>% 
                    mutate(Site.ID = as.numeric(Site.ID))

#Load in site coords
  Site_Coords <- read.csv("/dbfs/FileStore/WSX_HGray/Sites.csv") %>% 
                          rename_with(tolower) %>% 
                          rename(Site.ID = site_id) %>% 
                          mutate(Site.ID = as.numeric(Site.ID))

# Convert to sf so can crop spatial by CAT- Crop spatially because I don't trust the site names are the same.
    Inv_Site_22 <- inner_join(Invert_Site, Site_Coords, by = "Site.ID") %>% 
                    st_as_sf(., coords= c("easting", "northing"), crs=27700) %>% 
                    st_transform(4326)
    
# Crop to catchment  
Inv_Site_22 <- Inv_Site_22[CAT,]


leaflet() %>% 
  addProviderTiles(providers$Esri,
                   group = "Esri Basemap") %>% 

  addPolylines(data = DRN, 
               color = "steelblue",
               opacity = 1,
               weight = 1.4,
               options = pathOptions(zIndex = 600)) %>% 
  
     addPolygons(data= CDE_Inv_22,
                color = "black",
                weight = 0.5,
                fillOpacity = 0.7,
                fillColor = ~pal(CDE_Inv_22$Status),
                popup= CDE_Inv_22$Water.Body,
                options = pathOptions(zIndex = 400),
                group= "2022 WFD WB Status",
                ) %>% 
   addPolygons(data = CDE_Inv_19,
               color= "black",
               fillOpacity = 0.7,
               fillColor = ~pal(CDE_Inv_19$Status),
               weight = 1.4,
               options = pathOptions(zIndex = 400),
               group = "2019 WFD WB Status") %>% 
  
    addCircleMarkers(data=Inv_Site_22,
                radius = 5,
                fillColor = ~pal(Inv_Site_22$Site.Class), # This is our classification
                color = "black",
                weight = 2,
                fillOpacity = 1,
                popup = paste0("Site: ", Inv_Site_22$Site.Name),
                options = pathOptions(zIndex = 999),
                group= "2022 WFD Site Status") %>% 
  
     addLayersControl(baseGroups = c("Esri Basemap","Blank Basemap"),
                   overlayGroups = c(
              "2022 WFD WB Status",
              "2019 WFD WB Status",
              "2022 WFD Site Status"),
                   position = "topright",
                   options= layersControlOptions(collapsed=FALSE)) %>% 
  htmlwidgets::onRender(Layers_JS) %>% 
  hideGroup(c("2019 WFD WB Status",
              "Esri Basemap")) %>% 
  addLegend(title= paste0("Invertebrate WFD Status"),
            pal = pal, values = CDE_Inv_22$Status)


```
:::

```{r Leaflet Inverts & WFD Polygons Map}
#| layout-ncol: 2
#| column: page


# We need to merge to provide site level WFD classifications with X.Y data which we have in WIMS!
inv <- read.csv("/dbfs/mnt/lab/unrestricted/harry.gray@environment-agency.gov.uk/CEP/Inv_WSX.csv") #%>% 
             #   rename_with(tolower)

inv <- inv %>%
    mutate(
    Date = lubridate::ymd(Date),
    Sampled_Date_Amended = lubridate::ymd(REPLICATE_CODE)
  ) %>% 
  filter(OPCAT_NAME == unique(CAT$OPCAT_NAME) & Date >= "2000-01-01")


Rivers_250k <- read_sf("/dbfs/mnt/lab/unrestricted/harry.gray@environment-agency.gov.uk/CEP/Hydrology/Rivers_250k.shp")

Rivs250 <- Rivers_250k %>% 
              st_transform(st_crs(4326)) %>% 
              st_intersection(CAT_Union)

# Don't use BMPW_Mean it's over the whole time span not custom

inv_2019 <- inv %>% 
              mutate(
                Sample_Date_Maybe = dmy(ANALYSIS_ID)
              ) %>% 
              filter(Year >= "2019") %>% 
               group_by(SITE_ID) %>% 
                mutate(
                  Sample_Count_Mean = length(unique(Sampled_Date_Amended)),
                  WHPT_TOTAL_Mean = mean(WHPT_TOTAL)
                )

```

The below plot shows Biosys data with WHPT Total plotted on top of interim 2022 WFD invertebrate classifications.

```{r}

pal_inv <- colorBin(palette = "RdYlBu", domain=inv_2019$WHPT_TOTAL_Mean)

inv_2010 <- inv %>% 
              filter(Year >= 2010 & Year <= 2018) %>% 
              group_by(SITE_ID) %>% 
                mutate(
                  Sample_Count_Mean = length(unique(Sampled_Date_Amended)),
                  WHPT_TOTAL_Mean = mean(WHPT_TOTAL)
                )

pal_inv_2010 <- colorBin(palette = "RdYlBu", domain=inv_2010$WHPT_TOTAL_Mean)

# Leaflet plot of riverfly 
#
leaflet() %>% 
  addProviderTiles(providers$Esri,
                   group = "Esri Basemap") %>% 
    addPolygons(data=CAT, 
              label = CAT$WB_NAME, 
              fill=NA,
              color = "black",
              weight = 2) %>% 
 addPolygons(data=CDE_e,
               color = "black",
              weight = 0.5,
              fillOpacity = 0.22,
              fillColor = ~pal(CDE_e$Status),
              popup= CDE_e$Water.Body,
              group= "2022 WFD Invertebrate Status")  %>% 
       # Here's where I added the RHS dat
addPolylines(data = Rivs250, 
               color = "steelblue",
               opacity = 1,
               weight = 1.4) %>% 
  addCircleMarkers(data = inv_2019,
                   lng = ~lon, 
                   lat = ~lat, 
                   radius = 5,
                   fillColor = ~pal_inv(inv_2019$WHPT_TOTAL_Mean),
                   color = "black",
                   weight = 0.3,
                   fillOpacity = 1,
                   popup = paste0("WHPT Mean Score: ",inv_2019$WHPT_TOTAL_Mean,                        #Bit random dates? Check mean is calculated correctly. Also isn't it WHPT we should show not BMWP? I think the columns may be messed up as ANALAYSIS_ID is our date.
                                  "<br> Sample Range: ", range(inv_2019$Sample_Date_Maybe)),
                   group = "2019-2024 <br> Biosys Invertebrate Sites"
                   )%>% 
  addCircleMarkers(data = inv_2010,
                   lng = ~lon, 
                   lat = ~lat, 
                   radius = 5,
                   fillColor = ~pal_inv_2010(inv_2010$WHPT_TOTAL_Mean),
                   color = "black",
                   weight = 0.3,
                   fillOpacity = 1,
                   popup = paste0("WHPT_TOTAL_Mean Score: ",inv_2010$WHPT_TOTAL_Mean,                        #Bit random dates? Check mean is calculated correctly. Also isn't it WHPT we should show not BMWP? I think the columns may be messed up as ANALAYSIS_ID is our date.
                                  "<br> Sample Date: ", inv_2010$Sampled_Date_Amended),
                   group = "2010-2018 <br> Biosys Invertebrate Sites") %>% 
  addLayersControl(baseGroups = c("Esri Basemap","Blank Basemap"),
                   overlayGroups = c(
              "2019-2024 <br> Biosys Invertebrate Sites",
              "2010-2018 <br> Biosys Invertebrate Sites",
              "2022 WFD Invertebrate Status"),
                   position = "topright",
                   options= layersControlOptions(collapsed=FALSE)) %>% 
  hideGroup(c("2019-2024 <br> Biosys Invertebrate Sites",
              "2010-2018 <br> Biosys Invertebrate Sites",
              "Esri Basemap")) %>% 
  addLegend(title= paste0("Mean WHPT Site <br> Scores 2019- Current"),
            pal = pal_inv, values = inv_2019$WHPT_TOTAL_Mean)

```

::: {.callout-tip collapse="true" icon="false"}
### Fish

:::{.panel-tabset}

## 2022 WFD Fish WB & Site Classifications
```{r Fish Accordion}
#| label: "Fish WFD Waterbody & Site Level Map"
#| fig-cap: "Map of 2022 Fish Classification"

# Import & transform WFD Site Classificatiosns for most recent classification.
    fish <- readxl::read_excel("/dbfs/FileStore/WSX_HGray/RiverFish_SiteData_Results_For_QA.xlsx") %>% 
            filter(NFPDArea == "Wessex") %>% 
            mutate(`Survey(Ranked)NGR` =  gsub("n/a","", `Survey(Ranked)NGR`, fixed=T)) #remove any junk from NGR grid ref

    Fish_osg <- rnrfa::osg_parse(fish$`Survey(Ranked)NGR`) # convert your oldschool national grid references
    
    fish$East<- Fish_osg[[1]]
    fish$North <- Fish_osg[[2]]
    
    Fish_Site_22 <- fish %>% st_as_sf(coords= c("East", "North"), crs=27700) %>% 
                            st_transform(4326)
    
    Fish_Site_22 <- Fish_Site_22[CAT,]

#Import WB WFD classifications for fish

    CDE_F_22 <- CDE %>% 
              filter(Classification.Item == "Fish" & 
                       Year == "2022") %>% 
              select(-starts_with("X"))  # drop unwanted columns
    
    CDE_F_19 <- CDE %>% 
              filter(Classification.Item == "Fish" & 
                       Year == "2019") %>% 
              select(-starts_with("X"))  # drop unwanted columns

# Could have all leaflet maps following the same template and set as a variable or function?

## Fish 
    
leaflet() %>% 
  addProviderTiles(providers$Esri,
                   group = "Esri Basemap") %>% 
    addPolygons(data= CDE_F_22,
                color = "black",
                weight = 0.5,
                fillOpacity = 0.5,
                fillColor = ~pal(CDE_F_22$Status),
                popup= CDE_F_22$Water.Body,
                options = pathOptions(zIndex = 400),
                group= "2022 WFD WB Status",
                ) %>% 
  
  addPolylines(data = DRN, 
               color = "steelblue",
               opacity = 1,
               weight = 1.4,
               options = pathOptions(zIndex = 600)) %>% 
  
     addPolygons(data= CDE_F_19,
                color = "black",
                weight = 0.5,
                fillOpacity = 0.5,
                fillColor = ~pal(CDE_F_19$Status),
                popup= CDE_F_19$Water.Body,
                options = pathOptions(zIndex = 400),
                group= "2019 WFD WB Status",
                ) %>% 
  
    addCircleMarkers(data=Fish_Site_22,
                radius = 5,
                fillColor = ~pal(Fish_Site_22$Description), # This is our classification
                color = "black",
                weight = 0.3,
               fillOpacity = 1,
               popup = paste0("Site: ", Fish_Site_22$SiteName),
               options = pathOptions(zIndex = 999),
               group= "2022 WFD Site Status") %>% 
  
     addLayersControl(baseGroups = c("Esri Basemap","Blank Basemap"),
                   overlayGroups = c(
              "2022 WFD WB Status",
              "2019 WFD WB Status",
              "2022 WFD Site Status"),
                   position = "topright",
                   options= layersControlOptions(collapsed=FALSE)) %>% 
  htmlwidgets::onRender(Layers_JS) %>% 
  hideGroup(c("2019 WFD WB Status",
              "Esri Basemap")) %>% 
  addLegend(title= paste0("Fish WFD Status"),
            pal = pal, values = CDE_F_22$Status)

```

## Fish 2

```{r}
## Data 2

  plot(Fish_Site_22)

```

:::

:::

::: {.callout-tip collapse="true" icon="false"}
### Macrophytes

Add a map and boxplot akin to WQ page.
:::
```{r Macrophytes Map in Accordion}


CDE_Mac_22 <- CDE %>% 
          filter(Classification.Item == "Macrophytes" & 
                   Year == "2022")


CDE_Mac_19<- CDE %>% 
          filter(Classification.Item == "Macrophytes" & 
                   Year == "2019")



  MacPs <- readxl::read_excel("/dbfs/FileStore/WSX_HGray/2022_Cycle_3_River_Macrophytes_draft_sub_element_results_v3.xlsx", sheet = "2022_C3_Macrophytes_Site") %>% 
                            rename_with(make.names) 
 #Load in site coords
   Site_Coords <- read.csv("/dbfs/FileStore/WSX_HGray/Sites.csv") %>% 
                          rename_with(tolower) %>% 
                          rename(Site.ID = site_id) %>% 
                          mutate(Site.ID = as.numeric(Site.ID))

# Convert to sf so can crop spatial by CAT- Crop spatially because I don't trust the site names are the same.
    Mac_Site_22 <- inner_join(MacPs, Site_Coords, by = "Site.ID") %>% 
                    st_as_sf(., coords= c("easting", "northing"), crs=27700) %>% 
                    st_transform(4326)
    
# Crop to catchment  
    Mac_Site_22 <- Inv_Site_22[CAT,]
    
    
leaflet() %>% 
  addProviderTiles(providers$Esri,
                   group = "Esri Basemap") %>% 
    addPolygons(data= CDE_Mac_22,
                color = "black",
                weight = 0.5,
                fillOpacity = 0.5,
                fillColor = ~pal(CDE_Mac_22$Status),
                popup= CDE_Mac_22$Water.Body,
                options = pathOptions(zIndex = 400),
                group= "2022 WFD WB Status",
                ) %>% 
  
   addPolylines(data = DRN, 
               color = "steelblue",
               opacity = 1,
               weight = 1.4,
               options = pathOptions(zIndex = 600)) %>% 
  
    addPolygons(data= CDE_Mac_19,
                color = "black",
                weight = 0.5,
                fillOpacity = 0.5,
                fillColor = ~pal(CDE_Mac_19$Status),
                popup= CDE_Mac_19$Water.Body,
                options = pathOptions(zIndex = 400),
                group= "2019 WFD WB Status",
                ) %>% 
  
    addCircleMarkers(data=Mac_Site_22,
                radius = 5,
                fillColor = ~pal(Mac_Site_22$Description), # This is our classification
                color = "black",
                weight = 0.3,
               fillOpacity = 1,
               popup = paste0("Site: ", Mac_Site_22$SiteName),
               options = pathOptions(zIndex = 999),
               group= "2022 WFD Site Status") %>% 
  
     addLayersControl(baseGroups = c("Esri Basemap","Blank Basemap"),
                   overlayGroups = c(
              "2022 WFD WB Status",
              "2019 WFD WB Status",
              "2022 WFD Site Status"),
                   position = "topright",
                   options= layersControlOptions(collapsed=FALSE)) %>% 
  htmlwidgets::onRender(Layers_JS) %>% 
  hideGroup(c("2019 WFD WB Status",
              "Esri Basemap")) %>% 
  addLegend(title= paste0("Macrophyte WFD Status"),
            pal = pal, values = CDE_Mac_22$Status)


```

### Third Party Data

This initial evidence pack doesn't include any ecological Water Company data, only data taken directly from the Riverfly Partnership. Third-parties often have a different or un-aligned monitoring agenda to the Environment Agency. Eventually through influence, priorities can be aligned however, initially data may not be exactly where the EA would require it. Here we view data from 2019 onwards.

```{r}
#| label: Riverfly data from RP
#fig-column: page-right


# Note the api is already filtered to everything after 2019
ARMI <- read.csv("/dbfs/FileStore/WSX_HGray/ETL_Imports_Require_Manual/Riverfly__5_.csv")

  OO <- ARMI %>% filter(!Location..Longitude== "NA",
                        Recorded..Date == as.Date(Recorded..Date),
                        Recorded..Date >= as.Date("01/01/2019")) 
  
  ARMI_sf <- st_as_sf(OO, coords= c("Location..Longitude", "Location..Latitude"), crs=4326)

  ARMI <- ARMI_sf[CAT,] 
  
ARMI %<>%
  mutate(
     DateTime = dmy_hm(paste0(ARMI$Recorded..Date, ARMI$Recorded..Time))
  ) %>% 
  group_by(Site) %>%
  mutate(
      Survey_Count = n(),
      Mean_Tot = round(mean(ARMI.Total, na.rm = TRUE),2)
  ) %>% 
    ungroup()

pal_cs_inv <- colorBin(palette = "RdYlBu", domain=ARMI$Mean_Tot)

## Leaflet Map
leaflet() %>% 
  addProviderTiles(providers$Esri,
                   group = "Esri Basemap") %>% 
    addPolygons(data=CAT, 
              label = CAT$WB_NAME, 
              fill=NA,
              color = "black",
              weight = 2) %>% 
 addPolygons(data=CDE_e,
               color = "black",
              weight = 0.5,
              fillOpacity = 0.22,
              fillColor = ~pal(CDE_e$Status),
              popup= CDE_e$Water.Body,
              group= "WFD Invertebrate Status")  %>% 
       # Here's where I added the RHS dat
addPolylines(data = Rivs250, 
               color = "steelblue",
               opacity = 1,
               weight = 1.4) %>% 
  addCircleMarkers(data = inv_2019,
                   lng = ~lon, 
                   lat = ~lat, 
                   radius = 5,
                   fillColor = ~pal_inv(inv_2019$WHPT_TOTAL_Mean),
                   color = "black",
                   weight = 0.3,
                   fillOpacity = 1,
                   popup = paste0("WHPT Mean Score: ",inv_2019$WHPT_TOTAL_Mean,                        
                                  "<br> Sample Range: ", range(inv_2019$Sample_Date_Maybe)),
                   group = "2019-2024 <br> Biosys Invertebrate Sites"
                   )%>% 
  addCircleMarkers(data = ARMI,
                   radius = 5,
                   fillColor = ~pal_cs_inv(ARMI$Mean_Tot),
                   color = "black",
                   weight = 0.3,
                   fillOpacity = 1,
                   popup = paste0("Mean Total Score: ", ARMI$Mean_Tot,  
                                  "<br> Sample Count: ", ARMI$Survey_Count),
                   group = "2019-2024 <br> Riverfly Partnership Sites") %>% 
  addCircleMarkers(data = inv_2010,
                   lng = ~lon, 
                   lat = ~lat, 
                   radius = 5,
                   fillColor = ~pal_inv_2010(inv_2010$WHPT_TOTAL_Mean),
                   color = "black",
                   weight = 0.3,
                   fillOpacity = 1,
                   popup = paste0("WHPT_TOTAL_Mean Score: ",inv_2010$WHPT_TOTAL_Mean,                   
                                  "<br> Sample Date: ", inv_2010$Sampled_Date_Amended),
                   group = "2010-2018 <br> Biosys Invertebrate Sites") %>% 
  addLayersControl(baseGroups = c("Esri Basemap","Blank Basemap"),
                   overlayGroups = c(
              "2019-2024 <br> Riverfly Partnership Sites",
              "2019-2024 <br> Biosys Invertebrate Sites",
              "2010-2018 <br> Biosys Invertebrate Sites",
              "WFD Invertebrate Status"),
                   position = "topright",
                   options= layersControlOptions(collapsed=FALSE)) %>% 
  hideGroup(c("2019-2024 <br> Biosys Invertebrate Sites",
              "2010-2018 <br> Biosys Invertebrate Sites",
              "WFD Invertebrate Status",
              "Esri Basemap")) %>% 
  addLegend(title= paste0("Mean Total CS Site <br> Scores 2019- Current"),
            pal = pal_inv_2010, values = ARMI$Mean_Tot)



```
