---
title: "Ecology"
format:
  html:
    theme: flatly
    toc: true
    toc-depth: 3
    toc-location: right
    number-sections: true
    callout-icon: false
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(message=FALSE,warning=FALSE, echo=FALSE, cache=TRUE)
```

```{css}
.dataTables_wrapper {
  max-height: 350px;
  overflow-y: auto;
}

.dataTables_wrapper table {
font-size: 11px;
}
```

The Water Framework Directive is centered on achieving “Good Ecological Status” or “Good Ecological Potential”, with all measures targeting improvements in ecology.

## WFD Biological Quality Elements

Ecological Overall Status is the overarching classification for ecology, it takes into consideration phys-chem status elements such as dissolved oxygen, phosphorous and ammonia (see Water Quality page) as well as specific pollutants such as Annex VIII substances. We wish to simplify this and provide sight of just biological quality elements on this page so as not to overlap with the evidence shown on the water quality page. Biological quality elements are as follows:

-   Fish

-   Invertebrates

-   Macrophytes & Phytobenthos

The lowest score in a waterbody for the above items is adopted as the "Biological Quality Elements" classification for that waterbody.

------------------------------------------------------------------------

```{r }
#| label: the general cps & cat

library(sf)
library(magrittr)
library(tidyverse)
library(leaflet)
library(lubridate)


source("Catch_Set_Up.R")
```

```{r CDE text}


# Load your data
CDE <- read.csv("/dbfs/mnt/lab/unrestricted/harry.gray@environment-agency.gov.uk/CEP/WFD_Wessex_2024.csv")

CDE %<>% 
  filter(Operational.Catchment == unique(CAT$OPCAT_NAME)) %>% 
  inner_join(CAT_geo, ., by = c("WB_ID" = "Water.Body.ID"))

# 2022 map
CDE_e_2022 <- CDE %>% 
  filter(Classification.Item == "Biological quality elements" & 
         Year == "2022")

# 2019 map
CDE_e_2019 <- CDE %>% 
  filter(Classification.Item == "Biological quality elements" & 
         Year == "2019" & Cycle == "3")

```

In the 2022 interim WFD classification, the `r unique(CAT$OPCAT_NAME)` saw `r round(((table(CDE_e_2022$Status)[[1]][1]/length(unique(CDE_e_2022$Water.Body)))*100),0)`% of waterbodies achieved *`r row.names(table(CDE_e_2022$Status))[1]`*, whilst `r round(((table(CDE_e_2022$Status)[[2]][1]/length(unique(CDE_e_2022$Water.Body)))*100),0)`% of waterbodies achieved *`r row.names(table(CDE_e_2022$Status))[2]`*, and `r round(((table(CDE_e_2022$Status)[[3]][1]/length(unique(CDE_e_2022$Water.Body)))*100),0)`% of waterbodies achieved *`r row.names(table(CDE_e_2022$Status))[3]`*.

In comparison, the 2019 WFD classification saw `r  round(((table(CDE_e_2019$Status)[[1]][1]/length(unique(CDE_e_2019$Water.Body)))*100),0)`% at *`r row.names(table(CDE_e_2019$Status))[1]`*, with `r round(((table(CDE_e_2019$Status)[[2]][1]/length(unique(CDE_e_2019$Water.Body)))*100),0)`% at *`r   row.names(table(CDE_e_2019$Status))[2]`*, and `r round(((table(CDE_e_2019$Status)[[3]][1]/length(unique(CDE_e_2019$Water.Body)))*100),0)`% at *`r row.names(table(CDE_e_2019$Status))[3]`*.

```{r}
#| label: Ecological Overall CDE Map

# Define palette


CDE_e_2015 <- CDE %>% 
  filter(Classification.Item == "Biological quality elements" & 
         Year == "2015")


 leaflet() %>% 
  addProviderTiles(providers$Esri,
                  group = "Esri Basemap") %>% 
  addPolygons(data= CDE_e_2022,
              color = "black",
              weight = 0.5,
              fillOpacity = 1,
              fillColor = ~pal(Status),
              popup= ~Water.Body,
              highlightOptions = highlightOptions(color = "white", weight = 4,
                      bringToFront = FALSE),
              group = "2022 Status") %>% 
  addPolygons(data= CDE_e_2019,
              color = "black",
              weight = 0.5,
              fillOpacity = 1,
              fillColor = ~pal(Status),
              popup= ~Water.Body,
              highlightOptions = highlightOptions(color = "white", weight = 4,
                      bringToFront = FALSE),
              group = "2019 Status") %>% 
  addPolygons(data= CDE_e_2015,
              color = "black",
              weight = 0.5,
              fillOpacity = 1,
              fillColor = ~pal(Status),
              popup= ~Water.Body,
              highlightOptions = highlightOptions(color = "white", weight = 4,
                      bringToFront = FALSE),
              group = "2015 Status") %>% 
   addLegend(opacity = 0.9, 
            pal = pal,
            values = CDE_e_2022$Status,
            title = paste0(unique(CDE_e_2022$Classification.Item),
                           "<br> WFD Status")) %>%        
  addLayersControl(baseGroups = c( "2022 Status",
              "2019 Status",
              "2015 Status"),
                   overlayGroups = c(
             "Esri Basemap"),
                   position = "topright",
                   options= layersControlOptions(collapsed=FALSE)) %>% 
  hideGroup(c("2019 Status",
              "2015 Status",
              "Esri Basemap")) 






```

### Reasons for Not Achieving Good

::: {.callout-tip icon="true"}
Use the below 'Search' box to to search for a waterbody or classification element and scroll through RNAGs and Measures. Click the 'Excel' button to download a spreadsheet.
:::

::: column-body-outset
```{r RNAGS}

# Filter for just Phys-chem elements

RNAG <- RFF %>%  filter(
                           CLASS_ITEM_NAME %in% c("Fish", 
                                              "Invertebrates", 
                                              "Macroalgae", 
                                              "Macrophytes",
                                              "Macrophytes and Phytobenthos Combined",
                                              "Phytoplankton")) %>% 
                           rename(YEAR_RNAG_CREATED= CREATED_DATE,
                                                WFD_YEAR = YEAR) %>% 
                           distinct() %>% 
                           arrange(WATERBODY_ID)           # Arrange dataframe so it appears neater in DT


library(DT)
library(htmlwidgets)

DT::datatable(RNAG[,c(7, 6,18, 32, 16:17,19,20,22:30,23, 10,11,2)],
          class = 'cell-border stripe',
          extensions = c("Buttons","FixedColumns"),
          options = list(
            dom = 'Blfrtip',
            buttons = 'excel',
            initComplete = JS(
    "function(settings, json) {",
    "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});",
    "}"))
    )


```
:::

### Measures

Measures for the waterbodies identified above are shown in the table below.

::: column-body-outset
```{r Measures}
Mes %<>%  filter(WATERBODY_ID %in% unique(RNAG$WATERBODY_ID))

CAT_Mini <- CAT %>% select(WB_NAME, WB_ID) %>% 
  st_drop_geometry()

Mes_Categ <- inner_join(Mes, Measures_Cat, by = "ACTION_UID") %>% 
             inner_join(CAT_Mini, by = c("WATERBODY_ID" = "WB_ID")) %>% 
              filter(!CREATED_DATE== "01/01/1980" & DEPRECATED_CATEGORY == "No") %>% 
              distinct() %>% 
              arrange(WATERBODY_ID)



   DT::datatable(Mes_Categ[,c(16,3,10,12:14)],
          class = 'cell-border stripe',
          extensions = c("Buttons","FixedColumns"),
          options = list(
            dom = 'Blfrtip',
            buttons = 'excel',
            initComplete = JS(
    "function(settings, json) {",
    "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});",
    "}"))
    )

```
:::

```{r}

# Do we still use this?

CDE_f <- CDE %>% 
  filter(Class.Master.Master == "ECO" & Year == "2022")

  
 # RNAG <- RNAG %>% 
    #           
     #           filter(CREATED_DATE == sort(CREATED_DATE)[length(sort(CREATED_DATE))])# %>%   # We want the most recent creation date for each pressure
   # mutate(
    #           Date = as.Date(ymd_hms(CREATED_DATE))
     #          ) %>% 
             # filter(hydromorph == "not designated artificial or heavily modified") %>%  # I think we should still consider A/HMWBs
            #   group_by(PRESSURE_1) %>%          
    
    #   ungroup()

  
  # Filter RNAGs by CLass_Item so we can toggle them on/off in below plot.
  RNAG_Inv <- RNAG %>% 
                  filter(CLASS_ITEM_NAME == "Invertebrates")
  
  RNAG_Fish <- RNAG %>% 
                  filter(CLASS_ITEM_NAME == "Fish")
    
      RNAG_Macros <- RNAG %>% 
                  filter(CLASS_ITEM_NAME == "Macrophytes and Phytobenthos Combined")
      
         RNAG_DO <- RNAG %>% 
                  filter(CLASS_ITEM_NAME == "Dissolved oxygen")
         
          
            RNAG_Phos <- RNAG %>% 
                  filter(CLASS_ITEM_NAME == "Phosphate")


#            leaflet() %>% 
#  addProviderTiles(providers$Esri) %>% 
#    addPolygons(data=CAT_Union,
#                        color="black",
  #                     weight = 2,
  #                     opacity = 0.99,
  #                     fillColor = NA,
  #                     fillOpacity = 0.00001
    #              ) %>% 
  #  addPolygons(data=RNAG_Inv,
#              color = "black",
 #             weight = 0.5,
 #             fillOpacity = ~ifelse(RNAG_Inv$CREATED_DATE < as.Date("2019-01-01"), 0.2, 0.99),
 #             fillColor = "grey",# ~pal(RNAG_Inv$CLASSIFICATION_NAME),
 #             popup= paste0("RNAG Created: ",RNAG_Inv$CREATED_DATE, "<br>",
 #                           "Element: ", RNAG_Inv$CLASS_ITEM_NAME, "<br>",
  #                          "WB: ",RNAG_Inv$WATERBODY_NAME, "<br> Pressure 1: ",
  #                          RNAG_Inv$PRESSURE_1,
  #                          "<br> Pressure 2: ",
  #                         RNAG_Inv$PRESSURE_NAME_2,
  #                          "<br> Activity: " ,
  #                          RNAG_Inv$ACTIVITY),
  #           group = "Invertebrates RNAGs")%>% 
  #              addLegend(opacity = 0.9, 
  #                       pal = pal,
   #                      values = RNAG_Inv$CLASSIFICATION_NAME,
   #                      title = "RNAG by Ecological Quality Element") 
            
     

```

## Monitoring Data

The below pop-up plots show the latest interim WFD classification (2022) for the individual elements the make up the WFD Biological Quality Elements. These are visualised at a waterbody and site level.

```{r Site Level Data load}
#| eval: false

# We need to merge to provide site level WFD classifications with X.Y data which we have in WIMS!
inv <- read.csv("/dbfs/mnt/lab/unrestricted/harry.gray@environment-agency.gov.uk/CEP/Inv_WSX.csv") %>% 
                rename_with(tolower)

inver <- inv %>%
    mutate(
    Date = lubridate::ymd(date),
    Sampled_Date_Amended = lubridate::ymd(replicate_code)
  ) %>% 
  filter(opcat_name == unique(CAT$OPCAT_NAME) & Date >= "2000-01-01")


### Complete waste of time, the site ids aren't the same (melting face)
inver_join <- inver %>% rename(Northing = ngr_prefix, 
                               ngr_prefix = northing) %>% select(2, Northing, easting, 106)

Inv_Site <- Invert_Site %>% inner_join(inver_join, by = c("Site.ID" = "site_id"))
  
  
```

::: {.callout-tip collapse="true" icon="false"}
## Invertebrate Plots

::: panel-tabset
## 2022 WFD Invertebrates WB & Site Classifications

Invertebrates have been used to assess the ecological health of rivers as they act as biotic indicators for water quality, habitat diversity and hydrological pressures whilst unlike fish or macrophytes, their abundance is less impacted by barriers.

```{r WFD Invert Map}
#| label: Inverts WFD 2022

# Laod WB level 2022 & 2019 data for inverts
CDE_Inv_22 <- CDE %>% 
          filter(Classification.Item == "Invertebrates" & 
                   Year == "2022")


CDE_Inv_19<- CDE %>% 
          filter(Classification.Item == "Invertebrates" & 
                   Year == "2019")


# Load site level 2022 classifications.
Invert_Site <- readxl::read_excel("/dbfs/FileStore/WSX_HGray/ETL_Exports/2022_C3_River_Invertebrates_Draft_Results_v1.xlsx", sheet= "Site results") %>% 
                    rename_with(make.names) %>% 
                    filter(Site.Area == "Wessex") %>% 
                    mutate(Site.ID = as.numeric(Site.ID))

#Load in site coords
  Site_Coords <- read.csv("/dbfs/FileStore/WSX_HGray/Sites.csv") %>% 
                          rename_with(tolower) %>% 
                          rename(Site.ID = site_id) %>% 
                          mutate(Site.ID = as.numeric(Site.ID))

# Convert to sf so can crop spatial by CAT- Crop spatially because I don't trust the site names are the same.
    Inv_Site_22 <- inner_join(Invert_Site, Site_Coords, by = "Site.ID") %>% 
                    st_as_sf(., coords= c("easting", "northing"), crs=27700) %>% 
                    st_transform(4326)
    
# Crop to catchment  
Inv_Site_22 <- Inv_Site_22[CAT,]


leaflet() %>% 
  addProviderTiles(providers$Esri,
                   group = "Esri Basemap") %>% 

  addPolylines(data = DRN, 
               color = "steelblue",
               opacity = 1,
               weight = 1.4,
               options = pathOptions(zIndex = 600)) %>% 
  
     addPolygons(data= CDE_Inv_22,
                color = "black",
                weight = 0.5,
                fillOpacity = 0.7,
                fillColor = ~pal(CDE_Inv_22$Status),
                popup= CDE_Inv_22$Water.Body,
                options = pathOptions(zIndex = 400),
                highlightOptions = highlightOptions(color = "white", weight = 4,
                      bringToFront = FALSE),
                group= "2022 WFD WB Status",
                ) %>% 
   addPolygons(data = CDE_Inv_19,
               color= "black",
               fillOpacity = 0.7,
               fillColor = ~pal(CDE_Inv_19$Status),
               weight = 1.4,
               options = pathOptions(zIndex = 400),
               highlightOptions = highlightOptions(color = "white", weight = 4,
                      bringToFront = FALSE),
               group = "2019 WFD WB Status") %>% 
  
    addCircleMarkers(data=Inv_Site_22,
                radius = 10,
                fillColor = ~pal(Inv_Site_22$Site.Class), # This is our classification
                color = "black",
                weight = 2,
                fillOpacity = 1,
                popup = paste0("Site: ", Inv_Site_22$Site.Name),
                options = pathOptions(zIndex = 999),
                group= "2022 WFD Site Status") %>% 
  
     addLayersControl(baseGroups = c("Esri Basemap","Blank Basemap"),
                   overlayGroups = c(
              "2022 WFD WB Status",
              "2019 WFD WB Status",
              "2022 WFD Site Status"),
                   position = "topright",
                   options= layersControlOptions(collapsed=FALSE)) %>% 
  htmlwidgets::onRender(Layers_JS) %>% 
  hideGroup(c("2019 WFD WB Status",
              "Esri Basemap")) %>% 
  addLegend(title= paste0("Invertebrate WFD Status"),
            pal = pal,
            position = "bottomleft",
            values = CDE_Inv_22$Status)


```

```{r Leaflet Inverts & WFD Polygons Map}
#| layout-ncol: 2
#| column: page

# We need to merge to provide site level WFD classifications with X.Y data which we have in WIMS!
inv <- read.csv("/dbfs/mnt/lab/unrestricted/harry.gray@environment-agency.gov.uk/CEP/Inv_WSX.csv") #%>% 
             #   rename_with(tolower)

inv <- inv %>%
    mutate(
    Date = lubridate::ymd(Date),
    Sampled_Date_Amended = lubridate::ymd(REPLICATE_CODE)
  ) %>% 
  filter(OPCAT_NAME == unique(CAT$OPCAT_NAME) & Date >= "2000-01-01")


Rivers_250k <- read_sf("/dbfs/mnt/lab/unrestricted/harry.gray@environment-agency.gov.uk/CEP/Hydrology/Rivers_250k.shp")

Rivs250 <- Rivers_250k %>% 
              st_transform(st_crs(4326)) %>% 
              st_intersection(CAT_Union)

# Don't use BMPW_Mean it's over the whole time span not custom

inv_2022 <- inv %>% 
              mutate(
                Sample_Date_Maybe = dmy(ANALYSIS_ID)
              ) %>% 
              filter(Year >= 2022) %>% 
               group_by(SITE_ID) %>% 
                mutate(
                  Sample_Count_Mean = length(unique(Sampled_Date_Amended)),
                  WHPT_TOTAL_Mean = mean(WHPT_TOTAL)
                )

```

## 2022-2024 Monitoring

```{r}

pal_inv <- colorBin(palette = "RdYlBu", domain=inv_2022$WHPT_TOTAL_Mean, bins = c(2,3,4,5,6,7,8,9))

inv_2010 <- inv %>% 
              filter(Year >= 2010 & Year <= 2018) %>% 
              group_by(SITE_ID) %>% 
                mutate(
                  Sample_Count_Mean = length(unique(Sampled_Date_Amended)),
                  WHPT_TOTAL_Mean = mean(WHPT_TOTAL)
                )

pal_inv_2010 <- colorBin(palette = "RdYlBu", domain=inv_2010$WHPT_TOTAL_Mean)

# Leaflet plot of riverfly 
#
leaflet() %>% 
  addProviderTiles(providers$Esri,
                   group = "Esri Basemap") %>% 
  addPolygons(data=CAT, 
              label = CAT$WB_NAME, 
              fill=NA,
              color = "black",
              weight = 2,
              options = pathOptions(zIndex = 600),
              group = "Waterbodies"
              ) %>% 
  
  addPolygons(data=CAT_Union,
                  fillOpacity = 0.0001,
                  fillColor = NA,
                  color = "black",
                  weight = 3)%>% 
                
       # Here's where I added the RHS dat
  addPolylines(data = DRN, 
               color = "steelblue",
               opacity = 1,
               weight = 1.4,
               options = pathOptions(zIndex = 600)) %>% 
    
  addCircleMarkers(data = inv_2022,
                   lng = ~lon, 
                   lat = ~lat, 
                   radius = 10,
                   fillColor = ~pal_inv(inv_2022$WHPT_TOTAL_Mean),
                   color = "black",
                   weight = 1,
                   fillOpacity = 1,
                   options = pathOptions(zIndex = 999),
                   popup = paste0("WHPT Mean Score: ",inv_2022$WHPT_TOTAL_Mean, 
                                  "<br> Sample From/ To: ", min(inv_2022$Sample_Date_Maybe),"/ ",
                                  max(inv_2022$Sample_Date_Maybe))
                   )%>% 
  addLayersControl(overlayGroups = c("Waterbodies"),
                   position = "topright",
                   options= layersControlOptions(collapsed=FALSE)) %>% 

       htmlwidgets::onRender(Layers_JS) %>% 
  
  addLegend(title= paste0("Mean WHPT Total 2022- Current"),
            pal = pal_inv, 
            position= "bottomleft",
            values = inv_2022$WHPT_TOTAL_Mean)

```
:::
:::

::: {.callout-tip collapse="true" icon="false"}
## Fish

### 2022 WFD Fish WB & Site Classifications

Fish can be used to indicate the ecological status of a river. Metrics on river fish composition, abundance and prevalence are run through the FCS2 classification tool. The actual (observed) values for these metrics are compared with a predicted value (reflecting a river in pristine condition). The comparison of the observed to expected values is known as an Ecological Quality Ratio (EQR). EQRs are used to produce a fish classification.

```{r Fish Accordion}
#| label: "Fish WFD Waterbody & Site Level Map"


# Import & transform WFD Site Classificatiosns for most recent classification.
    fish <- readxl::read_excel("/dbfs/FileStore/WSX_HGray/ETL_Exports/RiverFish_SiteData_Results_For_QA.xlsx") %>%
            filter(NFPDArea == "Wessex") %>% 
            mutate(`Survey(Ranked)NGR` =  gsub("n/a","", `Survey(Ranked)NGR`, fixed=T)) #remove any junk from NGR grid ref

    Fish_osg <- rnrfa::osg_parse(fish$`Survey(Ranked)NGR`) # convert your oldschool national grid references
    
    fish$East<- Fish_osg[[1]]
    fish$North <- Fish_osg[[2]]
    
    Fish_Site_22 <- fish %>% st_as_sf(coords= c("East", "North"), crs=27700) %>% 
                            st_transform(4326)
    
    Fish_Site_22 <- Fish_Site_22[CAT,]

#Import WB WFD classifications for fish

    CDE_F_22 <- CDE %>% 
              filter(Classification.Item == "Fish" & 
                       Year == "2022") %>% 
              select(-starts_with("X"))  # drop unwanted columns
    
    CDE_F_19 <- CDE %>% 
              filter(Classification.Item == "Fish" & 
                       Year == "2019") %>% 
              select(-starts_with("X"))  # drop unwanted columns

## Fish 
    
leaflet() %>% 
  addProviderTiles(providers$Esri,
                   group = "Esri Basemap") %>% 
    addPolygons(data= CDE_F_22,
                color = "black",
                weight = 0.5,
                fillOpacity = 0.5,
                fillColor = ~pal(CDE_F_22$Status),
                popup= CDE_F_22$Water.Body,
                highlightOptions = highlightOptions(color = "white", weight = 4,
                      bringToFront = FALSE),
                options = pathOptions(zIndex = 400),
                group= "2022 WFD WB Status",
                ) %>% 
  
  addPolylines(data = DRN, 
               color = "steelblue",
               opacity = 1,
               weight = 1.4,
               options = pathOptions(zIndex = 600)) %>% 
  
     addPolygons(data= CDE_F_19,
                color = "black",
                weight = 0.5,
                fillOpacity = 0.5,
                fillColor = ~pal(CDE_F_19$Status),
                popup= CDE_F_19$Water.Body,
                highlightOptions = highlightOptions(color = "white", weight = 4,
                      bringToFront = FALSE),
                options = pathOptions(zIndex = 400),
                group= "2019 WFD WB Status",
                ) %>% 
  
    addCircleMarkers(data=Fish_Site_22,
                radius = 10,
                fillColor = ~pal(Fish_Site_22$Description), # This is our classification
                color = "black",
                weight = 0.3,
               fillOpacity = 1,
               popup = paste0("Site: ", Fish_Site_22$SiteName),
               options = pathOptions(zIndex = 999),
               group= "2022 WFD Site Status") %>% 
  
     addLayersControl(baseGroups = c("Esri Basemap","Blank Basemap"),
                   overlayGroups = c(
              "2022 WFD WB Status",
              "2019 WFD WB Status",
              "2022 WFD Site Status"),
                   position = "topright",
                   options= layersControlOptions(collapsed=FALSE)) %>% 
  htmlwidgets::onRender(Layers_JS) %>% 
  hideGroup(c("2019 WFD WB Status",
              "Esri Basemap")) %>% 
  addLegend(title= paste0("Fish WFD Status"),
            pal = pal,
            position="bottomleft",
            values = CDE_F_22$Status)

```
:::

::: {.callout-tip collapse="true" icon="false"}
### Macrophytes & Phytobenthos

### 2022 WFD Macrophytes & Phytobenthos WB & Site Classifications

A combined classification element, macrophytes & phytobenthos have been designed to reflect the impact of nutrient enrichment (predominantly impacting Phytobenthos). It can also be sensitive to some other anthropogenic pressures, including alterations to river flows and modifications to morphological conditions which may act alone or in combination to affect macrophytes.

```{r Macrophytes Map in Accordion}


CDE_Mac_22 <- CDE %>% 
          filter(Classification.Item == "Macrophytes and Phytobenthos Combined" & 
                   Year == "2022")


CDE_Mac_19<- CDE %>% 
          filter(Classification.Item == "Macrophytes and Phytobenthos Combined" & 
                   Year == "2019")



  MacPs <- readxl::read_excel("/dbfs/FileStore/WSX_HGray/ETL_Exports/2022_Cycle_3_River_Macrophytes_draft_sub_element_results_v3.xlsx", sheet = "2022_C3_Macrophytes_Site") %>% 
                            rename_with(make.names) 
 #Load in site coords
   Site_Coords <- read.csv("/dbfs/FileStore/WSX_HGray/Sites.csv") %>% 
                          rename_with(tolower) %>% 
                          rename(Site.ID = site_id) %>% 
                          mutate(Site.ID = as.numeric(Site.ID))

# Convert to sf so can crop spatial by CAT- Crop spatially because I don't trust the site names are the same.
   Mac_Site_22 <- inner_join(MacPs, Site_Coords, by = "Site.ID") %>% 
                    st_as_sf(., coords= c("easting", "northing"), crs=27700) %>% 
                    st_transform(4326)
    
# Crop to catchment  
   Mac_Site_22 <- Mac_Site_22[CAT,]
    
    
    leaflet() %>% 
      addProviderTiles(providers$Esri,
                       group = "Esri Basemap") %>% 
        addPolygons(data= CDE_Mac_22,
                    color = "black",
                    weight = 0.5,
                    fillOpacity = 0.5,
                    fillColor = ~pal(CDE_Mac_22$Status),
                    popup= CDE_Mac_22$Water.Body,
                    options = pathOptions(zIndex = 400),
                    group= "2022 WFD WB Status",
                    ) %>% 
      
       addPolylines(data = DRN, 
                   color = "steelblue",
                   opacity = 1,
                   weight = 1.4,
                   options = pathOptions(zIndex = 600)) %>% 
      
        addPolygons(data= CDE_Mac_19,
                    color = "black",
                    weight = 0.5,
                    fillOpacity = 0.5,
                    fillColor = ~pal(CDE_Mac_19$Status),
                    popup= CDE_Mac_19$Water.Body,
                    highlightOptions = highlightOptions(color = "white", weight = 4,
                      bringToFront = FALSE),
                    options = pathOptions(zIndex = 400),
                    group= "2019 WFD WB Status",
                    ) %>% 
      
        addCircleMarkers(data=Mac_Site_22,
                    radius = 10,
                    fillColor = ~pal(Mac_Site_22$Classification), # This is our classification
                    color = "black",
                    weight = 0.3,
                   fillOpacity = 1,
                   popup = paste0("Site: ", Mac_Site_22$Site.Name ),
                   options = pathOptions(zIndex = 999),
                   group= "2022 WFD Site Status") %>% 
      
         addLayersControl(baseGroups = c("Esri Basemap","Blank Basemap"),
                       overlayGroups = c(
                  "2022 WFD WB Status",
                  "2019 WFD WB Status",
                  "2022 WFD Site Status"),
                       position = "topright",
                       options= layersControlOptions(collapsed=FALSE)) %>% 
      htmlwidgets::onRender(Layers_JS) %>% 
      hideGroup(c("2019 WFD WB Status",
                  "Esri Basemap")) %>% 
      addLegend(title= paste0("Macrophytes & Phytobenthos Combines WFD Status"),
                pal = pal, 
                position = "bottomleft",
                values = CDE_Mac_22$Status)


```
:::

## Third Party Data

This initial evidence pack doesn't include any ecological Water Company data, only data taken directly from the Riverfly Partnership. Third-parties often have a different or un-aligned monitoring agenda to the Environment Agency. Eventually through influence, priorities can be aligned, however, initially data may not be exactly where the EA would require it. Here we view a site mean for citizen science riverfly sites from 2022 onwards.

```{r}
#| label: Riverfly data from RP

# Note the api is already filtered to everything after 2019
ARMI <- read.csv("/dbfs/FileStore/WSX_HGray/ETL_Exports/Riverfly__7_.csv")

  OO <- ARMI %>% filter(!Location..Longitude== "NA",
                        Recorded..Date == as.Date(Recorded..Date),
                        Recorded..Date >= as.Date("01/01/2022")) 
  
  ARMI_sf <- st_as_sf(OO, coords= c("Location..Longitude", "Location..Latitude"), crs=4326)

  ARMI <- ARMI_sf[CAT,] 
  
ARMI %<>%
  mutate(
     DateTime = dmy_hm(paste0(ARMI$Recorded..Date, ARMI$Recorded..Time)),
     Date = as.Date(DateTime)
  ) %>% 
  group_by(Site) %>%
  mutate(
      Survey_Count = n(),
      Mean_Tot = round(mean(ARMI.Total, na.rm = TRUE),2)
  ) %>% 
    ungroup()

pal_cs_inv <- colorBin(palette = "RdYlBu", domain=ARMI$Mean_Tot)

## Leaflet Map
leaflet() %>% 
    addProviderTiles(providers$Esri,
                   group = "Esri Basemap") %>% 

    addPolygons(data=CAT, 
              label = CAT$WB_NAME, 
              fill=NA,
              color = "black",
              weight = 2,
              options = pathOptions(zIndex = 600),
              group = "Waterbodies"
              ) %>% 
  
       # Here's where I added the RHS dat
    addPolylines(data = DRN, 
               color = "steelblue",
               opacity = 1,
               weight = 1.4,
               options = pathOptions(zIndex = 600)) %>% 
 
    addCircleMarkers(data = ARMI,
                   radius = 10,
                   fillColor = ~pal_cs_inv(ARMI$Mean_Tot),
                   color = "black",
                   weight = 0.3,
                   fillOpacity = 1,
                   popup = paste0("Mean Total Score: ", ARMI$Mean_Tot,  
                                  "<br> Sample Count: ", ARMI$Survey_Count,
                                  "<br> Group: ", ARMI$Team,
                                  "<br> From/ To: ", min(ARMI$Recorded..Date), "/ ", max(ARMI$Recorded..Date)),
                    options = pathOptions(zIndex = 999)) %>% 
 
    addLayersControl(overlayGroups = "Waterbodies",
                   position = "bottomleft",
                   options= layersControlOptions(collapsed=FALSE)) %>% 
  
        htmlwidgets::onRender(Layers_JS) %>% 
  
    addLegend(title= paste0("Mean Riverfly Scores 2022- Current"),
            pal = pal_inv, 
            position = "bottomleft",
            values = ARMI$Mean_Tot)



```
