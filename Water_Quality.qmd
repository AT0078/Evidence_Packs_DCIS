---
title: "Water Quality"
format:
  html:
    theme: flatly
    toc: true
    toc-location: right
    number-sections: true
    code-fold: false
    code-tools: false
    fig-cap: true
    callout-icon: false
---

::: callout-warning
## This page is under construction
:::

## Overall Physio-Chemical WFD

```{r setup, include=FALSE}
knitr::opts_chunk$set(message=FALSE,warning=FALSE, echo=FALSE, cache=TRUE)
```

```{css}
.dataTables_wrapper {
  max-height: 350px;
  overflow-y: auto;
}

.dataTables_wrapper table {
font-size: 11px;
}
```

```{r }
#| label: the general cps & cat

library(sf)
library(magrittr)
library(tidyverse)
library(leaflet)


source("Catch_Set_Up.R")
```

```{r}

# Load your data
CDE <- read.csv("/dbfs/mnt/lab/unrestricted/harry.gray@environment-agency.gov.uk/CEP/WFD_Wessex_2024.csv")

CDE %<>% 
  filter(Operational.Catchment == unique(CAT$OPCAT_NAME)) %>% 
  inner_join(CAT_geo, ., by = c("WB_ID" = "Water.Body.ID"))

# Define palette
pal <- colorFactor(
  palette = c("green", "seagreen", "seagreen", "yellow", "#c65102", "#b71105", "red"),
  levels = c("High", "Good", "Supports Good", "Moderate", "Bad", "Poor", "Fail"),
  na.color = "transparent"
)

# 2022 map
CDE_e_2022 <- CDE %>% 
  filter(Classification.Item == "Physio-Chemical Quality Elements" & 
         Year == sort(unique(CDE$Year), decreasing=TRUE)[1])

CDE_e_2019 <- CDE %>% 
  filter(Classification.Item == "Physio-Chemical Quality Elements" & 
         Year == "2019")

list <- unique(CDE[CDE$Classification.Item.Subgroup == "Physio-Chemical Quality Elements Group",]$Classification.Item)

```

Within the `r unique(CAT$OPCAT_NAME)`'s `r length(unique(CAT$WB_NAME))` individual EA waterbodies.

In the most recent WFD classification in `r sort(unique(CDE$Year), decreasing=TRUE)[1]`, `r round(sum(CDE_e_2022$Status == "Good")/length(unique(CAT$WB_NAME))*100, digits=0)`% of waterbodies scored "Good" for `r unique(CDE_e_2022$Classification.Item)`, whilst `r round(sum(CDE_e_2022$Status == "High")/length(unique(CAT$WB_NAME))*100, digits=0)`% of waterbodies scored "High".

In comparison the 2019 WFD classification saw: `r round(sum(CDE_e_2019$Status == "Good")/length(unique(CAT$WB_NAME))*100, digits=0)`% of waterbodies scored "Good" for `r unique(CDE_e_2019$Classification.Item)`, whilst `r round(sum(CDE_e_2019$Status == "High")/length(unique(CAT$WB_NAME))*100, digits=0)`% of waterbodies scored "High".

`r unique(CDE_e_2022$Classification.Item)` include the following items:

-   Ammonia (Phys-Chemical)
-   Dissolved oxygen
-   Temperature
-   Biochemical Overall Oxygen Demand (BOD)
-   Phosphate
-   pH
-   Acid Neutralising Capacity

```{r}
#| label: Ecological Overall CDE Map

CDE_e_2015 <- CDE %>% 
  filter(Classification.Item == "Invert" & 
         Year == "2015")

CDE_e <- CDE %>% 
         filter(Classification.Item == "Physio-Chemical Quality Elements" & 
         Year == c(2015, 2019, 2022))








         leaflet() %>% 
  addProviderTiles(providers$Esri,
                   group = "Esri Basemap") %>% 
   addPolygons(data= CDE_e_2015,
              color = "black",
              weight = 0.5,
              fillOpacity = 0.7,
              fillColor = ~pal(Status),
              popup= ~Water.Body,
              group= "2015 Status") %>% 
  addPolygons(data= CDE_e_2019,
              color = "black",
              weight = 0.5,
              fillOpacity = 0.7,
              fillColor = ~pal(Status),
              popup= ~Water.Body,
              group= "2019 Status") %>% 
  addPolygons(data= CDE_e_2022,
              color = "black",
              weight = 0.5,
              fillOpacity = 0.7,
              fillColor = ~pal(Status),
              popup= ~Water.Body,
              group = "2022 Status") %>% 
  addLegend(opacity = 0.9, 
            pal = pal,
            values = CDE_e_2022$Status,
            title = unique(CDE_e_2019$Classification.Item)) %>% 
  addLayersControl(baseGroups = c( "2022 Status",
              "2019 Status",
              "2015 Status"),
                   overlayGroups = c(
             "Esri Basemap"),
                   position = "topright",
                   options= layersControlOptions(collapsed=FALSE)) %>% 
  hideGroup(c("2019 Status",
              "2015 Status",
              "Esri Basemap"))



```

### Reasons for Not Acheiving Good

The below table shows RNAGs which either have a Phys-Chem classification element or either of their main pressures as nutrients or Phys-Chem elements.

::: {.callout-tip icon="true"}
Use the below 'Search' box to to search for a waterbody or classification element and scroll through RNAGs and Measures. Click the 'Excel' button to download a spreadsheet.
:::

::: column-body-outset
```{r RNAGS datatable WQ}

RFF <- read.csv("/dbfs/FileStore/WSX_HGray/RFF.csv")
RFF <- RFF[RFF$OPERATIONAL_CATCHMENT %in% c("Poole Harbour Rivers","Poole Harbour Rivers TraC"),]


rnag1 <- RFF %>%  filter(OPERATIONAL_CATCHMENT %in% c("Poole Harbour Rivers TraC", "Poole Harbour Rivers") & 
                    PRESSURE_1 == "Nutrients")
rnag1_1 <- RFF %>%  filter(OPERATIONAL_CATCHMENT %in% c("Poole Harbour Rivers TraC", "Poole Harbour Rivers") & 
                            PRESSURE_2 %in% c("Phosphate","Nitrate (Dissolved Inorganic Nitrogen"))
rnag2 <- RFF %>% 
                
               filter(CLASS_ITEM_NAME %in% c("Ammonia (Phys-Chem)", 
                                            "Dissolved oxygen",
                                            "Temperature",
                                            "Phosphate",
                                            "Ammonia (Annex 8)",
                                            "pH",
                                            "Biochemical Overall Oxygen Demand (BOD)",
                                            "Mercury and Its Compounds",
                                            "Polybrominated diphenyl ethers (PBDE)"))%>% 
                       arrange(WATERBODY_ID)           # Arrange dataframe so it appears neater in DT


RNAG <- rbind(rnag1,rnag1_1, rnag2)

RNAG <- RNAG %>% rename(YEAR_RNAG_CREATED= CREATED_DATE,
                        WFD_YEAR = YEAR) %>% 
            distinct()
library(DT)
library(htmlwidgets)

DT::datatable(RNAG[,c(7, 6,18, 32, 16:17,19,20,22:30,23, 10,11,2)],
          class = 'cell-border stripe',
          extensions = c("Buttons","FixedColumns"),
          options = list(
            dom = 'Blfrtip',
            buttons = 'excel',
            initComplete = JS(
    "function(settings, json) {",
    "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});",
    "}"))
    )


```
:::

### Measures to Improve Waterbodies

::: column-body-outset
```{r Measures WQ}
Mes %<>%  filter(WATERBODY_ID %in% unique(RNAG$WATERBODY_ID))

CAT_Mini <- CAT %>% select(WB_NAME, WB_ID) %>% 
  st_drop_geometry()

Mes_Categ <- inner_join(Mes, Measures_Cat, by = "ACTION_UID") %>% 
             inner_join(CAT_Mini, by = c("WATERBODY_ID" = "WB_ID")) %>% 
              filter(!CREATED_DATE== "01/01/1980") %>% 
                arrange(WATERBODY_ID)



   DT::datatable(Mes_Categ[,c(16,3,10,12:14)],
          class = 'cell-border stripe',
          extensions = c("Buttons","FixedColumns"),
          options = list(
            dom = 'Blfrtip',
            buttons = 'excel',
            initComplete = JS(
    "function(settings, json) {",
    "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});",
    "}"))
    )
```
:::

```{r Phys Chem RNAG Map}
#| eval: false

       leaflet() %>% 
          addProviderTiles(providers$Esri) %>% 
          addPolygons(data=CAT_Union,
                          color="black",
                           weight = 2,
                           opacity = 0.99,
                           fillColor = NA,
                           fillOpacity = 0.00001
                  ) %>% 
          addPolygons(data=RNAG,
                      color = "black",
                       weight = 0.5,
                       fillOpacity = ~ifelse(RNAG$Date < as.Date("2019-01-01"), 0.2, 0.99),
                      fillColor = ~pal(RNAG$CLASSIFICATION_NAME),
                      popup= paste0("RNAG Created: ",RNAG$Date, "<br>",
                            "Element: ", RNAG$CLASS_ITEM_NAME, "<br>",
                            "WB: ",RNAG$WB_NAME, "<br> Pressure 1: ",
                            RNAG$PRESSURE_NAME_1,
                            "<br> Pressure 2: ",
                            RNAG$PRESSURE_NAME_2,
                            "<br> RFF Action Name: " ,
                            RNAG$RFF_ACTION_NAME),
                    label = RNAG$WB_ID,
                    group = "Invertebrates RNAGs")%>% 
                    addLegend(opacity = 0.9, 
                           pal = pal,
                           values = RNAG$CLASSIFICATION_NAME,
                           title = "RNAG by Phys-Chem Quality Element") 
```

```{r RNAG Measures}

#Meas_tbl <-  CPS_sf %>% filter("MEASURE_TIER1_NAME","MEASURE_TIER2_NAME", "MEASURE_TIER3_NAME")
#DT::datatable(CPS_sf[],
 #         class = 'cell-border stripe',
  #        caption = 'Use the map below to find a waterbody and use the table search function to find its records',
   #       options = list(dom = 'Blfrtip', buttons = 'copy')
    #          ) 
```

-------------------------------------------------------------------------------------------------------------------------------------------------------------

## Pressures

### Point Source Pollution

The below map provides the whereabouts of continuous permitted WWtW and their likelihood of eutrophication, as well as the option to view intermittent CSO discharges for 2023. These provide some indication of the loading from point source pollution on waterbodies. Point source pollution from fish farms and private consented discharges are not mapped here but can be found on easimap.

```{r Point Source Discharge plots}

# Will include private discharges, continuous WWTW discharges, intermittent CSO discharges.

# WWTW Continuous Discharges
WWTW <- readxl:: read_excel("/dbfs/FileStore/WSX_HGray/ETL_Imports_Require_Manual/STW_spreadsheet_DRAFT.xlsx", sheet= "MASTER", skip=1)

# Transform from E/N to Lat/Long  
  WWTW %<>% filter(!is.na(`Northing (Outlet)` | `Easting (Outlet)`)) %>% 
                        st_as_sf(., coords = c("Easting (Outlet)","Northing (Outlet)"), crs=27700) %>% 
                        st_transform(4326)
  
  WWTW <- WWTW[CAT,]
##################################################### ######################################################## #########################################################
# CSO Intermittent Discharges
# Filtered for Wessex water
sewage <- readxl::read_excel("/dbfs/FileStore/WSX_HGray/Copy_of_EDM_2023_Storm_Overflow_Annual_Return___all_water_and_sewerage_companies.xlsx", sheet="Wessex Water 2023", skip=1)

sewage$`Outlet Discharge NGR\r\n(EA Consents Database)` <-  gsub("n/a","", sewage$`Outlet Discharge NGR\r\n(EA Consents Database)`, fixed=T) #remove any junk

XO <- rnrfa::osg_parse(sewage$`Outlet Discharge NGR\r\n(EA Consents Database)`) # convert your oldschool national grid references

sewage$East <- XO[[1]]
sewage$North <- XO[[2]]

#Convert sewage to sf

X <-    sewage %>% st_as_sf(coords= c("East", "North"), crs=27700) %>% 
            st_transform(4326)#
         
# Crop sf
  sewage <- X[CAT,]
  
##################################################### ######################################################## #########################################################
# Private Discharges
  
  
```

::: column-body-outset
```{r Point source discharges map}
#| fig-cap: "Wessex Water Continuous and Intermittent sewage discharges"


PAL <- colorNumeric("YlOrBr", domain = sewage$`Total Duration (hrs) all spills prior to processing through 12-24h count method`)
sequ <- seq(min(sewage$`Total Duration (hrs) all spills prior to processing through 12-24h count method`), max(sewage$`Total Duration (hrs) all spills prior to processing through 12-24h count method`), length.out = 5)

leaflet() %>% 
  addProviderTiles(providers$Esri) %>% 
  addCircleMarkers(data=WWTW,
             color = "blue",
             weight = 1,
             radius = 12,
             fillOpacity = 0.8,
             popup = paste0("Site: ", WWTW$`WwTW Name`, 
                            "<br> WOE 2019: ", WWTW$WOE_2019)
            
            ) %>% 
  addCircleMarkers(data=sewage,
                      radius = ~(sqrt(`Total Duration (hrs) all spills prior to processing through 12-24h count method`)-1), 
                      color = "black",
                      weight = 1,
                      fillColor = ~PAL(`Total Duration (hrs) all spills prior to processing through 12-24h count method`),
                      fillOpacity = 1,
                      popup = ~paste0("Annual Spill Count (2023): ", as.character(round(`Total Duration (hrs) all spills prior to processing through 12-24h count method`), 0), " hrs", "<br> At site: ", `Site Name\r\n(EA Consents Database)`),
                   group = "WxW CSO Sewage Discharge Points") %>%  
  addPolygons(data=CAT,
                        fillColor = NA,
                        fillOpacity = 0.00001,
                        color = "black",
                        opacity = 0.8,
                        popup = CAT$WB_NAME,
                        group="Waterbodies") %>% 
  
  addPolylines(data=DRN, col="#2832C2", weight=1, 
                     opacity = 0.5,
                     group="Detailed River Network") %>%
  addLegend("bottomright", 
                labels = "WwTW", colors = "blue") %>% 
  addLegend("bottomright", 
                      pal = PAL, 
                      values = sequ, 
                      title = "Sewage Discharge <br> Total Hrs 2023",
                      group = "WxW CSO Sewage Discharge Points") %>% 
                    addScaleBar()  %>% 
  
  addLayersControl(   overlayGroups = c("Waterbodies",
                                         "WxW CSO Sewage Discharge Points"),
                       position="topright",
                       options=layersControlOptions(collapsed=FALSE)) %>% 
  
  hideGroup(c("Waterbodies",
                  "WxW CSO Sewage Discharge Points"))
```
:::

### Diffuse Source Pollution

The below map shows data from the Agricultural Land Environmental Risk Tool ([ALERT](https://defra.sharepoint.com/:u:/r/teams/Team646/SitePages/A.L.E.R.T-Home-Page.aspx?csf=1&web=1&e=hPErKt)), it models diffuse pollution pathways and simulates their diffuse pollution risk. Created by the Geomatics team, EA, it is commonly used by agricultural teams in farm visits, the diffuse pollution risk scores are based on: 
* Land-use (most recent)
* Hill slope 
* Erosion and runoff risk of soil 
* Mean precipitation

Why is this modelled risk, not actual risk? From in-river water quality monitoring, we can monitor the amount of actual sediment lost from catchments to rivers but this is confined to monitoring sites. Simulating diffuse pollution risk from the aforementioned parameters provides a far wider overview of pollution risk.

The below map provides a mean score of diffuse pollution per waterbody using the data from ALERT, for further granularity, you can view diffuse pollution pathways at a reach scale.

::: column-body-outset
```{r Map from ALERT tool}
#| fig-cap: "Diffuse pollution pathways data taken from the Agricultural Land Environmental Risk Tool"

# The input file geodatabase
  gdb <- st_read("/dbfs/FileStore/WSX_HGray/ALERT_WSX.gdb", quiet = TRUE)


# Create a wb wide score and transform
ALERT <- gdb %>%
          group_by(WATERBODY_NAME) %>%
          mutate(Catch_Overall_Risk = round(mean(CatchmentRiskScore),1)) %>% 
          ungroup() %>% 
          rename(WB_NAME = WATERBODY_NAME)

# Crop to catchment & transform to WGS84
  ALERT_CAT <- ALERT[CAT_27700,]
  ALERT_CAT %<>% st_transform(4326)

# Assign wb risk score to catchment wbs.
  ALERT_WB <- ALERT_CAT %>% select(2,23) %>% 
                             st_drop_geometry() %>%  
                             inner_join(CAT, by = "WB_NAME") %>% 
                             distinct() %>%     # We had a polygon for every linestring so make unique for each wb
                             st_as_sf()
                            
                             
# Create map with ALERT data
  SEQ <- c(2,2.5,3,3.5,4,4.5,5)
  pal_ALERT<- colorBin(palette = "YlOrRd", bins = SEQ, domain = ALERT_WB$Catch_Overall_Risk)
  pal_ALERT_N<- colorNumeric(palette = "YlOrRd",  domain = ALERT_CAT$Catch_Overall_Risk)

  
        leaflet() %>% 
          addProviderTiles(providers$Esri,
                           group = "Esri Basemap") %>%
          addProviderTiles(providers$Esri.WorldImagery,
                           group = "Satellite Basemap") %>% 
          addPolygons(data = ALERT_WB,
                      fillColor = ~pal_ALERT(Catch_Overall_Risk),
                      fillOpacity = 0.5,
                      color = 1,
                      popup = paste0("<b>Mean Catchment<br>Diffuse Pollution Risk: </b>", ALERT_WB$Catch_Overall_Risk,
                                     "<br><b>Waterbody: </b>", ALERT_WB$WB_NAME),
                      group = "Catchment Risk") %>% 
          addPolylines(data = ALERT_CAT,
               color = ~pal_ALERT(CatchmentRiskScore),
               opacity = 1,
               weight = 1,
               highlightOptions = highlightOptions(
                    weight = 7,
                    opacity = 1),
               popup = paste0("Diffuse Pollution Risk: ", ALERT_CAT$CatchmentRiskDesc,
                              "<br> Waterbody: ", ALERT_CAT$WB_NAME),
               group = "Diffuse Pollution Pathways") %>% 
          addLegend("bottomleft",
                    pal = pal_ALERT_N,
                    values = ALERT_CAT$Catch_Overall_Risk,
                    title = "Diffuse Pollution Risk",
                    group = "Diffuse Pollution Pathways") %>% 
          addLegend("bottomright", 
                    pal = pal_ALERT, 
                    values = SEQ,
                    title = "Diffuse Pollution Risk",
                    group = "Catchment Risk") %>%   # Adjusted group to match the layer group
          addScaleBar() %>% 
          addLayersControl(baseGroups = c("Esri Basemap", "Satellite Basemap"),
            overlayGroups = c("Catchment Risk", "Diffuse Pollution Pathways"),
                           position = "topright",
                           options = layersControlOptions(collapsed = FALSE)) %>% 
          hideGroup(c("Diffuse Pollution Pathways","Satellite Basemap"))
        

```
:::

-----------------------------------------------------------------------------------------------------------------------------------------
## Monitoring data

Here we select a few physio-chemical elements, these although traditionally used for WFD WQ monitoring, are only a cross section. They don't include emerging chemicals such as caffeine, anti-depressants etc. These are partly covered by priority substances or not monitored for at all. Furthermore, the impact of multiple interacting chemicals, "chemical cocktails" are also not considered here.

In order to give a monitoring overview, the below pop-up plots show data over the last 5 years, this includes the interim WFD classification in 2022, at both a waterbody and site level. From 2022 to current, where no WFD classification is calculated, monitoring site data is still provided.

```{r load in WIMS data}
#| layout: full

# Load in WIMS for CAT
  source("WIMS_Transform_Script.R")

  # We display most recent 2 years after the last classifications. 
  # We display the 3 years before then which aligns with the 2022 interim WFD classification.

  WIMS_CAT_22 <- WIMS_CAT %>%  filter(Year >= 2022)             
  WIMS_CAT_20 <- WIMS_CAT %>%  filter(Year >= 2019 & Year < 2022) 
  
  #1 Wims
  WIMS_P <- WIMS_CAT_22 %>% filter(
                                determinand.definition == "Orthophosphate, reactive as P") %>% 
                    group_by(sample.samplingPoint.label) %>% 
                    mutate(Mean_P = round(mean(result),2),
                           Mean_count = n()) %>% 
                    ungroup()
  #2 CDE Transforms
  CDE_P <- CDE %>% filter(Classification.Item == "Phosphate" & Year == "2022")
  

  WIMS_am <- WIMS_CAT_22 %>% filter(
                                determinand.definition== "Ammoniacal Nitrogen as N"
                                 ) %>% 
                      group_by(sample.samplingPoint.label) %>% 
                      mutate(Mean_A = round(mean(result),2),
                             Mean_count = n())
   #CDE Transforms
      CDE_Am <- CDE %>% filter(Classification.Item == "Ammonia (Phys-Chemical)" & Year == "2022")
  
   WIMS_DO <- WIMS_CAT_22 %>% filter(
                                determinand.definition == "Oxygen, Dissolved, % Saturation") %>% 
                    group_by(sample.samplingPoint.label) %>% 
                    mutate(Mean_DO = round(mean(result),2),
                           Mean_count = n()) %>% 
                    ungroup()
   
      CDE_DO <- CDE %>% filter(Classification.Item == "Dissolved oxygen" & Year == "2022")
  
   
    WIMS_BOD <- WIMS_CAT_22 %>% filter(
                                determinand.definition == "BOD : 5 Day ATU") %>% 
                    group_by(sample.samplingPoint.label) %>% 
                    mutate(BOD_90th = round(quantile(result, probs = 0.9, na.rm=TRUE),2),
                           Quantile_count = n()) %>% 
                    ungroup()
    
      CDE_BOD <- CDE %>% filter(Classification.Item == "Biochemical Overall Oxygen Demand (BOD)" & Year == "2022")
    
      WIMS_NTU <- WIMS_CAT_22 %>% filter(
                                  determinand.definition == "Turbidity") %>% 
                      group_by(sample.samplingPoint.label) %>% 
                      mutate(Mean_NTU = round(mean(result),2),
                             Mean_count = n()) %>% 
                      ungroup()
   
    
```

```{r WFD Classifications at Site level}

Phys_Chem_Site <- readxl::read_excel("/dbfs/FileStore/WSX_HGray/2022_Phys_Chem_Classification_QA_document__RAW_.xlsx", sheet= "Site Class")

# Filter by Wessex area and convert to sf
  Phys_Chem_Site <- Phys_Chem_Site %>% filter(SITE_EA_AREA == "Wessex") %>% 
                    st_as_sf(coords=c("SITE_EASTING","SITE_NORTHING"), crs=27700) %>% 
                    st_transform(4326)
  
  Phys_Chem_Site <- Phys_Chem_Site[CAT,]
# Phosphate
  Site_P <- Phys_Chem_Site %>% filter(Name == "Phosphate") 
  
# Ammonia
  Site_Am <- Phys_Chem_Site %>% filter(Name== "Ammonia")
  
# DO
  Site_DO <- Phys_Chem_Site %>% filter(Name=="DO")

# BOD
  Site_BOD <- Phys_Chem_Site %>% filter(Name=="BOD")

```
::: {.callout-tip collapse="true"}
### Phosphate Plots


Orthophosphate reactive as P (PO4-P) monitoring sites are grouped together per waterbody within the catchment in the plot shown below. Horizontal lines indicate "poor" and "good" WFD site classifications. Mean sample orthophosphate readings are shown for individual monitoring sites in the map below. Both plots show the most recent monitoring from 2022-2024.

```{r violin plots of WIMS OrthoPhos}

# Violin plot
v <- ggplot(WIMS_P, aes(x = WB_NAME, y = result)) +
 # geom_violin(aes(fill = WB_NAME), color = "black", alpha = 0.5) +  # Violin plot with some transparency
  geom_boxplot(width = 0.05, color = "black", aes(fill = WB_NAME), alpha = 0.7) +  # Boxplot on top
   geom_text(aes(x = WB_NAME, y = -Inf, label = paste("Count: ", Mean_count)), vjust = -0.5, hjust = 0.5, size = 4) +  # Add counts below the x-axis if available
  labs(title = "Phosphate Distribution by WB", x = "Waterbody", y = "Phosphate (mg/L)") +
  #scale_y_continuous(limits = c(0,20), breaks = c(0,0.1,0.2,0.3,0.5,1)) + 
  geom_hline(yintercept = 0.3, col = "red")+ # this is wfd poor
  geom_hline(yintercept = 0.1, col = "green")+# this is wfd good
  theme_minimal() +  # Use a minimal theme for a cleaner look
  theme(legend.position = "none", axis.text.x = element_text(angle=45, size=9)) +
  labs(caption = "WFD Phosphate Reactive P, good and poor indicated by horizontal lines")+
  coord_flip()

#a <- ggplot(WIMS_p, aes(x= WB_NAME, y=result, col=result))+
#  geom_point()+theme(axis.text.x = element_text(angle=90, size=5))+labs(y= "Orthophosphate (mg/L)", x= "Waterbodies")

# Add the caption manually using layout
plotly::ggplotly(v)  %>%
  plotly::layout(
    annotations = list(
      x = 0.5,  # Horizontal center
      y = -5,  # Position below the plot
      text = "WFD Phosphate Reactive P, good and poor indicated by horizontal lines",
      showarrow = FALSE,
      xref = "paper",
      yref = "paper",
      font = list(size = 12)  # Adjust the font size if needed
    )
  )

```

:::{.panel-tabset}

## 2022 WFD WB & Site Classifications
```{r Orthophos maps}

# We now have a dataset for hourly spills within 2022 which is linked to locations. 
library(leaflet.extras)

# Define log-scaled bins for numeric data
binz <-c(0,0.05,0.1,0.2,0.5,1,2,5,10,Inf)

# Create a color palette using colorBin for numeric data
pal_p <- colorBin(palette = "inferno", domain = WIMS_P$result, bins = binz, reverse=TRUE )

    leaflet() %>%
      addProviderTiles(providers$Esri, group="Esri Basemap") %>% 
      addPolygons(data=CAT_Union,
                  fillOpacity = 0.0001,
                  fillColor = NA,
                  color = "black") %>% 
      addPolygons(data= CDE_P,
                  fillColor = ~pal(CDE_P$Status),
                  fillOpacity = 0.7,
                  color = "black",
                  weight= 0.4,
                  popup = paste0("WB Name: ", CDE_P$Water.Body,
                  "<br> Status: ", CDE_P$Status),
                  options = pathOptions(zIndex = 400),
                  group = "WFD WB Status (2022)") %>% 

      addPolylines(data=DRN, col="#2832C2", weight=1, 
                         opacity = 0.5,
                   options = pathOptions(zIndex = 600)) %>%

       addCircleMarkers(data=Site_P,
                        radius= 10,
                        color="black",
                        weight=1,
                        fillColor = ~pal(Class),
                        fillOpacity = 1,
                        popup = ~paste0("<br><b> 2022 WFD Status: </b>", Site_P$Class,
                                        "<br><b> Site: </b>", Site_P$SITE_NAME, 
                                        "<br><b> ID: </b>", Site_P$SITE_ID,
                                        "<br><b> Status Compliance: </b>", Site_P$Compliance, " What does this mean?",
                                        "<br><b> Mean: </b>", Site_P$Mean,
                                        "<br><b> Sample Range: </b>", Site_P$From_Yr, " - ", Site_P$To_Yr),
                        options = pathOptions(zIndex = 999),
                        group = "WFD Site Status (2022)"
                        ) %>% 
      addLegend("bottomright",
                      pal = pal,
                      values = Site_P$Class,
                      title = "2022 Phosphate WFD Status") %>% 

      
       addScaleBar()  %>% 
       addLayersControl(baseGroups = c("Esri Basemap","Blank Basemap"), 
                       overlayGroups = c(
                                         
                                         "WFD WB Status (2022)",
                                         "WFD Site Status (2022)"),
                       position="topright",
                       options= layersControlOptions(collapsed=FALSE)) %>% 
       htmlwidgets::onRender(Layers_JS) %>% 
       hideGroup(c( 
                  "Waterbodies", "2022? Phosphate WB Status", "2022 WFD Site Status", "Esri Basemap"))

```

## 2022-2024 Monitoring
```{r 2022-2024 P Monitoring data}

   leaflet() %>%
      addProviderTiles(providers$Esri, group="Esri Basemap") %>% 
      addPolygons(data=CAT_Union,
                  fillOpacity = 0.0001,
                  fillColor = NA,
                  color = "black",
                  weight = 3,
                  options = pathOptions(zIndex = 600)
                  ) %>% 
      addPolygons(data=CAT,
                  fillOpacity = 0.0001,
                  fillColor = NA,
                  color = "black",
                  weight = 3,
                  options = pathOptions(zIndex = 600),
                  group = "Waterbodies"
                  ) %>% 
      
      addPolylines(data=DRN, col="#2832C2", weight=1, 
                         opacity = 0.5,
                  options = pathOptions(zIndex = 600)
                   ) %>%
      addCircleMarkers(
                  data=WIMS_P,
                  radius = 10,
                  color = "black",
                  weight = 1,
                  fillColor = ~pal_p(Mean_P),
                  fillOpacity = 1,
                  popup = ~paste0("Site: ", WIMS_P$sample.samplingPoint.label, "<br> Mean PO4-P (mg/L): ", WIMS_P$Mean_P, "<br> Sample Count: ", WIMS_P$Mean_count,
                                      "<br> from/to: ",
                                      min(WIMS_P$Date), "/", max(WIMS_P$Date)),
                  options = pathOptions(zIndex = 999),
                  group = "PO4-P" ) %>% 
     addLegend("bottomleft", 
                      pal = pal_p, 
                      values = binz, 
                      title = "Mean PO4-P 2022-2024",
                      group = "PO4-P") %>% 
   addScaleBar()  %>% 
   addLayersControl(overlayGroups = c(
                                         
                                         "Waterbodies"
                                         ),
                       position="topright",
                       options= layersControlOptions(collapsed=FALSE)) %>% 
       htmlwidgets::onRender(Layers_JS) %>% 
       hideGroup(c( 
                  "Waterbodies"))

```
:::
:::

::: {.callout-tip collapse="true"}
## Ammonia Plots

Nitrates are primarily introduced into freshwater through agricultural runoff, wastewater discharge and septic tanks. Excess nitrates lead to algal blooms, low oxygen levels. Nitrites are typically present in smaller quantities than nitrates, although they are more toxic to aquatic organisms than nitrates. Nitrities are unstable and convert between ammonia and nitrate.

Ammonia is highly toxic to fish and aquatic organisms, it becomes more toxic at higher pH and water temperatures.

```{r Ammonia violin plot}

# Violin plot
v <- ggplot(WIMS_am, aes(x = WB_NAME, y = result)) +
 # geom_violin(aes(fill = WB_NAME), color = "black", alpha = 0.5) +  # Violin plot with some transparency
  geom_boxplot(width = 0.05, color = "black", aes(fill = WB_NAME), alpha = 0.7) +  # Boxplot on top
   geom_text(aes(x = WB_NAME, y = -Inf, label = paste("Count: ", Mean_count)), vjust = -0.5, hjust = 0.5, size = 4) +  
  labs(title = "Ammoniacal Nitrogen as N Distribution by WB", x = "Waterbody", y = "NH3 (mg/L)") +
  #scale_y_continuous(limits = c(0,20), breaks = c(0,0.1,0.2,0.3,0.5,1)) + 
  geom_hline(yintercept = 0.6, col = "green")+ # this is wfd good for lowland & high alkalinity river
  geom_hline(yintercept = 2.5, col = "red")+# this is wfd poor for lowland & high alkalinity river
  theme_minimal() +  
  theme(legend.position = "none", axis.text.x = element_text(angle=90, size=9)) +
  labs(caption = "WFD NH3, good and poor indicated by horizontal lines")+
  coord_flip()

#a <- ggplot(WIMS_p, aes(x= WB_NAME, y=result, col=result))+
#  geom_point()+theme(axis.text.x = element_text(angle=90, size=5))+labs(y= "Orthophosphate (mg/L)", x= "Waterbodies")

plotly::ggplotly(v) 


```
:::{.panel-tabset}
## 2022 WFD WB & Site Classifications
```{r Ammonia WFD map}



    leaflet() %>%
      addProviderTiles(providers$Esri, group="Esri Basemap") %>% 
      addPolygons(data=CAT_Union,
                  fillOpacity = 0.0001,
                  fillColor = NA,
                  color = "black") %>% 
      addPolygons(data=CDE_P,
                  fillColor = ~pal(CDE_Am$Status),
                  fillOpacity = 0.7,
                  color = "black",
                  weight= 0.4,
                  popup = paste0("WB Name: ", CDE_Am$Water.Body,
                  "<br> Status: ", CDE_Am$Status),
                  options = pathOptions(zIndex = 400),
                  group = "WFD WB Status (2022)") %>% 

      addPolylines(data=DRN, col="#2832C2", weight=1, 
                         opacity = 0.5,
                   options = pathOptions(zIndex = 600)) %>%

      addCircleMarkers(data=Site_Am,
                        radius= 10,
                        color="black",
                        weight=1,
                        fillColor = ~pal(Class),
                        fillOpacity = 1,
                        popup = ~paste0("<br><b> 2022 WFD Status: </b>", Site_Am$Class,
                                        "<br><b> Site: </b>", Site_Am$SITE_NAME, 
                                        "<br><b> ID: </b>", Site_Am$SITE_ID,
                                        "<br><b> Status Compliance: </b>", Site_Am$Compliance, " What does this mean?",
                                        "<br><b> Mean: </b>", Site_Am$Mean,
                                        "<br><b> Sample Range: </b>", Site_Am$From_Yr, " - ", Site_Am$To_Yr),
                        options = pathOptions(zIndex = 999),
                        group = "WFD Site Status (2022)"
                        ) %>% 
      addLegend("bottomright",
                      pal = pal,
                      values = Site_Am$Class,
                      title = "2022 Ammonia WFD Status") %>% 

      
       addScaleBar()  %>% 
       addLayersControl(baseGroups = c("Esri Basemap","Blank Basemap"), 
                       overlayGroups = c(
                                         
                                         "WFD WB Status (2022)",
                                         "WFD Site Status (2022)"),
                       position="topright",
                       options= layersControlOptions(collapsed=FALSE)) %>% 
       htmlwidgets::onRender(Layers_JS) %>% 
       hideGroup(c( 
                  "Waterbodies", "Esri Basemap"))



```
## 2022-2024 Monitoring
```{r Ammonia 22_24 monitoring mapping}

Am_Bins= c(0,0.3,0.6,1.1,2,3,Inf)

# Create a color palette using colorBin for numeric data
pal_A <- colorBin(palette = "inferno", domain = WIMS_am$result, bins = Am_Bins, reverse=TRUE )

leaflet() %>%
      addProviderTiles(providers$Esri, group="Esri Basemap") %>% 
      addPolygons(data=CAT_Union,
                  fillOpacity = 0.0001,
                  fillColor = NA,
                  color = "black",
                  weight = 3,
                  options = pathOptions(zIndex = 600)
                  ) %>% 
      addPolygons(data= CAT,
                  fillOpacity = 0.0001,
                  fillColor = NA,
                  color = "black",
                  weight = 3,
                  options = pathOptions(zIndex = 600),
                  group = "Waterbodies"
                  ) %>% 
      
      addPolylines(data=DRN, col="#2832C2", weight=1, 
                         opacity = 0.5,
                  options = pathOptions(zIndex = 600)
                   ) %>%
      addCircleMarkers(
                  data=WIMS_am,
                  radius = 10,
                  color = "black",
                  weight = 1,
                  fillColor = ~pal_A(Mean_A),
                  fillOpacity = 1,
                  popup = ~paste0("Site: ", WIMS_am$sample.samplingPoint.label, "<br> Mean N (mg/L): ", WIMS_am$Mean_P, "<br> Sample Count: ", WIMS_am$Mean_count,
                                      "<br> from/to: ",
                                      min(WIMS_am$Date), "/", max(WIMS_am$Date)),
                  options = pathOptions(zIndex = 999),
                  group = "N" ) %>% 
     addLegend("bottomleft", 
                      pal = pal_A, 
                      values = Am_Bins, 
                      title = "Mean Ammonia 2022-2024",
                      group = "N") %>% 
   addScaleBar()  %>% 
   addLayersControl(overlayGroups = c(
                                         
                                         "Waterbodies"
                                         ),
                       position="topright",
                       options= layersControlOptions(collapsed=FALSE)) %>% 
       htmlwidgets::onRender(Layers_JS) %>% 
       hideGroup(c( 
                  "Waterbodies"))
```


:::
:::

::: {.callout-tip collapse="true"}
## Dissolved Oxygen Plots

```{r DO Plots}

# Violin plot
v <- ggplot(WIMS_DO, aes(x = WB_NAME, y = result)) +
 # geom_violin(aes(fill = WB_NAME), color = "black", alpha = 0.5) +  # Violin plot with some transparency
  geom_boxplot(width = 0.05, color = "black", aes(fill = WB_NAME), alpha = 0.7) +  # Boxplot on top
   geom_text(aes(x = WB_NAME, y = -Inf, label = paste("Count: ", Mean_count)), vjust = -0.5, hjust = 0.5, size = 4) +  
  labs(title = "Dissolved Oxygen (% Sat) Distribution by WB", x = "Waterbody", y = "DO (% Saturation)") +
  #scale_y_continuous(limits = c(0,20), breaks = c(0,0.1,0.2,0.3,0.5,1)) + 
  geom_hline(yintercept = 60, col = "green")+ # this is wfd good for lowland & high alkalinity river
  geom_hline(yintercept = 45, col = "red")+# this is wfd poor for lowland & high alkalinity river
  theme_minimal() +  
  theme(legend.position = "none", axis.text.x = element_text(angle=90, size=9)) +
  labs(caption = "WFD Good and Poor indicated by horizontal lines")+
  coord_flip()

plotly::ggplotly(v) 

```

WFD classifications for lowland, high alkalinity river which are salmonid river the standards for the upland, low alkalinity type will apply.

:::{.panel-tabset}

## 2022 WFD WB & Site Classifications
```{r DO WFD map}


    leaflet() %>%
      addProviderTiles(providers$Esri, group="Esri Basemap") %>% 
      addPolygons(data=CAT_Union,
                  fillOpacity = 0.0001,
                  fillColor = NA,
                  color = "black") %>% 
      addPolygons(data=CDE_P,
                  fillColor = ~pal(CDE_DO$Status),
                  fillOpacity = 0.7,
                  color = "black",
                  weight= 0.4,
                  popup = paste0("WB Name: ", CDE_DO$Water.Body,
                  "<br> Status: ", CDE_DO$Status),
                  options = pathOptions(zIndex = 400),
                  group = "WFD WB Status (2022)") %>% 

      addPolylines(data=DRN, col="#2832C2", weight=1, 
                         opacity = 0.5,
                   options = pathOptions(zIndex = 600)) %>%

      addCircleMarkers(data=Site_DO,
                        radius= 10,
                        color="black",
                        weight=1,
                        fillColor = ~pal(Class),
                        fillOpacity = 1,
                        popup = ~paste0("<br><b> 2022 WFD Status: </b>", Site_DO$Class,
                                        "<br><b> Site: </b>", Site_DO$SITE_NAME, 
                                        "<br><b> ID: </b>", Site_DO$SITE_ID,
                                        "<br><b> Status Compliance: </b>", Site_DO$Compliance, " What does this mean?",
                                        "<br><b> Mean: </b>", Site_DO$Mean,
                                        "<br><b> Sample Range: </b>", Site_DO$From_Yr, " - ", Site_DO$To_Yr),
                        options = pathOptions(zIndex = 999),
                        group = "WFD Site Status (2022)"
                        ) %>% 
      addLegend("bottomright",
                      pal = pal,
                      values = Site_DO$Class,
                      title = "2022 Ammonia WFD Status") %>% 

      
       addScaleBar()  %>% 
       addLayersControl(baseGroups = c("Esri Basemap","Blank Basemap"), 
                       overlayGroups = c(
                                         
                                         "WFD WB Status (2022)",
                                         "WFD Site Status (2022)"),
                       position="topright",
                       options= layersControlOptions(collapsed=FALSE)) %>% 
       htmlwidgets::onRender(Layers_JS) %>% 
       hideGroup(c( 
                  "Waterbodies", "Esri Basemap"))


```

## 2022-2024 Monitoring
```{r DO 22_24 monitoring mapping}

binsss= c(0,45,54,60,70,Inf)
pal_DO <- colorBin(palette = "inferno", domain = WIMS_DO$result, bins = binsss, reverse=FALSE )



leaflet() %>%
      addProviderTiles(providers$Esri, group="Esri Basemap") %>% 
      addPolygons(data=CAT_Union,
                  fillOpacity = 0.0001,
                  fillColor = NA,
                  color = "black",
                  weight = 3,
                  options = pathOptions(zIndex = 600)
                  ) %>% 
      addPolygons(data= CAT,
                  fillOpacity = 0.0001,
                  fillColor = NA,
                  color = "black",
                  weight = 3,
                  options = pathOptions(zIndex = 600),
                  group = "Waterbodies"
                  ) %>% 
      
      addPolylines(data=DRN, col="#2832C2", weight=1, 
                         opacity = 0.5,
                  options = pathOptions(zIndex = 600)
                   ) %>%
      addCircleMarkers(
                  data=WIMS_DO,
                  radius = 10,
                  color = "black",
                  weight = 1,
                  fillColor = ~pal_DO(Mean_DO),
                  fillOpacity = 1,
                  popup = ~paste0("Site: ", WIMS_DO$sample.samplingPoint.label, "<br> Mean DO %sat: ", WIMS_DO$Mean_DO, "<br> Sample Count: ", WIMS_DO$Mean_count,
                                      "<br> from/to: ",
                                      min(WIMS_DO$Date), "/", max(WIMS_DO$Date)),
                  options = pathOptions(zIndex = 999),
                  group = "N" ) %>% 
     addLegend("bottomleft", 
                      pal = pal_DO, 
                      values = binsss, 
                      title = "Mean Dissolved Oxygen 2022-2024",
                      group = "N") %>% 
   addScaleBar()  %>% 
   addLayersControl(overlayGroups = c(
                                         
                                         "Waterbodies"
                                         ),
                       position="topright",
                       options= layersControlOptions(collapsed=FALSE)) %>% 
       htmlwidgets::onRender(Layers_JS) %>% 
       hideGroup(c( 
                  "Waterbodies"))
```
:::
:::

::: {.callout-tip collapse="true"}
## BOD Plots

```{r BOD Plots}

# Violin plot
v <- ggplot(WIMS_BOD, aes(x = WB_NAME, y = result)) +
 # geom_violin(aes(fill = WB_NAME), color = "black", alpha = 0.5) +  # Violin plot with some transparency
  geom_boxplot(width = 0.05, color = "black", aes(fill = WB_NAME), alpha = 0.7) +  # Boxplot on top
   geom_text(aes(x = WB_NAME, y = -Inf, label = paste("Count: ", Quantile_count)), vjust = -0.5, hjust = 0.5, size = 4) +  
  labs(title = "Biological Oxygen Demand (BOD ATU) by WB", x = "Waterbody", y = "BOD ATU") +
  geom_hline(yintercept = 5, col = "green")+ # this is wfd good for lowland & high alkalinity river
  geom_hline(yintercept = 9, col = "red")+# this is wfd poor for lowland & high alkalinity river
  theme_minimal() +  
  theme(legend.position = "none", axis.text.x = element_text(angle=90, size=9)) +
  labs(caption = "WFD Good and Poor indicated by horizontal lines")+
  coord_flip()

plotly::ggplotly(v) 

```

```{r BOD leaflet map}

binsss= c(0,4,5,6.5,9,Inf)
pal_BOD <- colorBin(palette = "inferno", domain = WIMS_BOD$result, bins = binsss, reverse=T )


leaflet() %>%
      addProviderTiles(providers$Esri, group="Esri") %>% 
       addPolygons(data=CAT,
                        fillColor = NA,
                        fillOpacity = 0.00001,
                        color = "black",
                        opacity = 0.8,
                        popup = CAT$WB_NAME,
                        group="Waterbodies") %>% 
       addPolygons(data=CAT_Union,
                  fillOpacity = 0.0001,
                  fillColor = NA,
                  color = "black") %>% 
       addPolylines(data=DRN, 
                    col="steelblue", 
                    weight=1, 
                    opacity = 0.5
                         ) %>%
       addCircleMarkers(
                      data=WIMS_BOD,
                      radius = 10,
                      color = "black",
                      weight = 1,
                      fillColor = ~pal_DO(BOD_90th),
                      popup = ~paste0("Site: ", WIMS_BOD$sample.samplingPoint.label, "<br>  BOD (ATU) 90th percentile: ", WIMS_BOD$BOD_90th, "<br> Sample Count: ", WIMS_BOD$Quantile_count,
                                      "<br> from/to: ",
                                      min(WIMS_BOD$Date), " / ", max(WIMS_BOD$Date)),
                      group = "Biological Oxygen Demand"
                                    ) %>% 
             
       addCircleMarkers(data=Site_BOD,
                        radius= 10,
                        color="black",
                        weight=1,
                        fillColor = ~pal(Class),
                        fillOpacity = 1,
                        popup = ~paste0("<br><b> 2022 WFD Status: </b>", Site_BOD$Class,
                                        "<br><b> Site: </b>", Site_BOD$SITE_NAME, 
                                        "<br><b> ID: </b>", Site_BOD$SITE_ID,
                                        "<br><b> Status Compliance: </b>", Site_BOD$Compliance, " What does this mean?",
                                        "<br><b> Mean: </b>", Site_BOD$Mean,
                                        "<br><b> Sample Range: </b>", Site_BOD$From_Yr, " - ", Site_BOD$To_Yr),
                        group = "2022 WFD Site Status"
                        ) %>% 
       addLegend("bottomright",
                      pal = pal,
                      values = Site_BOD$Class,
                      title = "2022 WFD Site Status",
                      group = "2022 WFD Site Status") %>% 
       addLegend("bottomleft", 
                      pal = pal_BOD, 
                      values = binsss, 
                      title = "WIMS Sites BOD ATU",
                      group = "Biological Oxygen Demand") %>% 
                    addScaleBar()  %>% 
       addLayersControl(baseGroups = c("Esri","Blank Basemap"), 
                       overlayGroups = c(
                                         "Waterbodies", "2022 WFD Site Status"),
                       position="topright",
                       options=layersControlOptions(collapsed=FALSE)) %>% 
       hideGroup(c(
                  "Waterbodies", "2022 WFD Site Status"))



```
:::

### Third Party Data

This initial evidence pack doesn't include any water quality Water Company data, only citizen science data taken directly from the Angling Trust's [water quality monitoring scheme](https://anglingtrust.net/wp-content/uploads/2022/12/Water-Quality-Monitoring-Network-Viewers-Pack-v2-FINAL-09.12.2022.pdf) (currently one of the easiest national Citizen Science schemes to get WQ data from). Third-parties often have a different or un-aligned monitoring agenda to the Environment Agency. Eventually through influence, priorities can be aligned however, initially data may not be exactly where the EA would require it.

```{r WQ Cit Sci Data}

  CitSciWQ <- read.csv("/dbfs/mnt/lab/unrestricted/harry.gray@environment-agency.gov.uk/ETL_Exports/ATWQMN_Cit_Sci_Update.csv")

# Filter and convert to sf
  CSWQ_sf <- CitSciWQ %>% filter(!is.na(Longitude) &!is.na(Latitude)) %>% 
              st_as_sf(coords=c("Longitude","Latitude"), crs=4326)
  
  # Re-apply the lat/lng coords to the df
               wgs <- CSWQ_sf %>% st_coordinates() %>%
                          as_tibble() 
               
              CSWQ_sf$lat <- wgs$Y
              CSWQ_sf$long <- wgs$X  
              
# Crop to catchment in question
  df <- CSWQ_sf[CAT,]

# Enter an if statement in case we don't have any data in our catchment   
  unique_count <- length(unique(df$Site_Name))

      if (unique_count >= 3) {
      
        pal_CS <- colorBin(palette = "plasma", domain=df$Mean_Nitrate, 
                       bins = c(0,0.5,1,2,3,4,5,10,15,20,Inf))
      
      
      # Count number of measurements at site for phosphate 
      df %<>%
          mutate(Date = as.Date(Date)) %>% 
          group_by(Site_Name, Phos_ppm) %>% 
        mutate(C = n()) %>% 
        ungroup()
      
      #Plot mean nitrate on a map, experimental so only covers an arbitrary timespan
      
            leaflet() %>% 
              addProviderTiles(providers$Esri) %>% 
               addPolygons(data=CAT, 
                          label = ~WB_NAME, 
                          fill=NA,
                          color = "black",
                          weight = 2) %>% 
              addPolylines(data = DRN, 
                           color = "steelblue",
                           opacity = 1,
                           weight = 1.4) %>% 
              addCircleMarkers(data= df,
                               lat = ~lat,
                               lng = ~long,
                               fillColor = ~pal_CS(Mean_Nitrate), 
                               color = "black",
                               weight = 0.1,
                               radius=10, 
                               opacity = 1,
                               popup = paste0("Site: ",df$Site_Name,"<br> ",
                                              "Mean Nitrate (ppm): ",df$Mean_Nitrate,
                                              "<br> Collected at: ", df$created_at,
                                              "<br> Mean sample count: ", df$C,
                                              "<br> <b>Site Photo<b> <br>",
                               "<img src='", df$`X_Please_add_a_phot`, "' width='200' height='150'>")
                                              ) %>% 
              addLegend(pal = pal_CS, values = df$Mean_Nitrate, opacity = 0.7,
                        title="Mean Nitrate (ppm)") %>% 
              addControl(paste0("Mean Nitrate (ppm) from ", range(df$Date)[1], " to ", 
                                range(df$Date)[2]),
                         position = "bottomleft")
   } else{
          print(paste0("The ", unique(CAT$OPCAT_NAME), " does not have any monitoring data collected in the Angling Trust's Water Quality Monitoring scheme to display"))
        }

```
