---
title: "Water Quality"
format: html
html:
    theme: flatly
    toc: true
    toc-location: right
    number-sections: false
    code-fold: false
    code-tools: false
    fig-cap: true
---

### This page is under construction

## Overall Physio-Chemical WFD

```{r setup, include=FALSE}
knitr::opts_chunk$set(message=FALSE,warning=FALSE, echo=FALSE, cache=TRUE)
```

```{r }
#| label: the general cps & cat

library(sf)
library(magrittr)
library(tidyverse)
library(leaflet)


source("Catch_Set_Up.R")
```

```{r}

# Load your data
CDE <- read.csv("/dbfs/mnt/lab/unrestricted/harry.gray@environment-agency.gov.uk/CEP/WFD_Wessex_2024.csv")

CDE %<>% 
  filter(Operational.Catchment == unique(CAT$OPCAT_NAME)) %>% 
  inner_join(CAT_geo, ., by = c("WB_ID" = "Water.Body.ID"))

# Define palette
pal <- colorFactor(
  palette = c("green", "seagreen", "seagreen", "yellow", "#c65102", "#b71105", "red"),
  levels = c("High", "Good", "Supports Good", "Moderate", "Bad", "Poor", "Fail"),
  na.color = "transparent"
)

# 2022 map
CDE_e_2022 <- CDE %>% 
  filter(Classification.Item == "Physio-Chemical Quality Elements" & 
         Year == sort(unique(CDE$Year), decreasing=TRUE)[1])

list <- unique(CDE[CDE$Classification.Item.Subgroup == "Physio-Chemical Quality Elements Group",]$Classification.Item)

```

Within the `r unique(CAT$OPCAT_NAME)`'s `r length(unique(CAT$WB_NAME))` individual EA waterbodies.

In the most recent WFD classification in `r sort(unique(CDE$Year), decreasing=TRUE)[1]`, `r round(sum(CDE_e_2022$Status == "Good")/length(unique(CAT$WB_NAME))*100, digits=0)`% of waterbodies scored "Good" for `r unique(CDE_e_2022$Classification.Item)`. Whilst `r round(sum(CDE_e_2022$Status == "High")/length(unique(CAT$WB_NAME))*100, digits=0)`% of waterbodies scored "High".

`r unique(CDE_e_2022$Classification.Item)` include the following items: `r cat(paste0("- ", list, collapse= "\n"))`

```{r}
cat(paste0("- ", list, collapse= "\n"))
```

```{r}
#| label: Ecological Overall CDE Map


# 2019 map
CDE_e_2019 <- CDE %>% 
  filter(Classification.Item == "Physio-Chemical Quality Elements" & 
         Year == "2019")

CDE_e_2015 <- CDE %>% 
  filter(Classification.Item == "Physio-Chemical Quality Elements" & 
         Year == "2015")

CDE_e <- CDE %>% 
         filter(Classification.Item == "Physio-Chemical Quality Elements" & 
         Year == c(2015, 2019, 2022))

         leaflet() %>% 
  addProviderTiles(providers$Esri,
                   group = "Esri Basemap") %>% 
   addPolygons(data= CDE_e_2015,
              color = "black",
              weight = 0.5,
              fillOpacity = 0.7,
              fillColor = ~pal(Status),
              popup= ~Water.Body,
              group= "2015 Status") %>% 
  addPolygons(data= CDE_e_2019,
              color = "black",
              weight = 0.5,
              fillOpacity = 0.7,
              fillColor = ~pal(Status),
              popup= ~Water.Body,
              group= "2019 Status") %>% 
  addPolygons(data= CDE_e_2022,
              color = "black",
              weight = 0.5,
              fillOpacity = 0.7,
              fillColor = ~pal(Status),
              popup= ~Water.Body,
              group = "2022 Status") %>% 
  addLegend(opacity = 0.9, 
            pal = pal,
            values = CDE_e_2022$Status,
            title = unique(CDE_e_2019$Classification.Item)) %>% 
  addLayersControl(baseGroups = c( "2022 Status",
              "2019 Status",
              "2015 Status"),
                   overlayGroups = c(
             "Esri Basemap"),
                   position = "topright",
                   options= layersControlOptions(collapsed=FALSE)) %>% 
  hideGroup(c("2019 Status",
              "2015 Status",
              "Esri Basemap"))



```

### Reasons for Not Acheiving Good

Use the table below to search for a term and scroll through RNAGs.

*caveat the only elements shown here are: "Ammonia (Phys-Chem)", "Dissolved oxygen", "Temperature", "Phosphate", "Ammonia (Annex 8)", - need to find if there's more Phys Chem elements*

```         
                                        _Measures are yet to be added to this doc_
```

```{r RNAGS datatable}

# These are just for ecological quality elements

RNAG <- CPS_sf %>% 
                mutate(
                Date = as.Date(ymd_hms(CREATED_DATE))
                ) %>% 
               filter(CLASS_ITEM_NAME %in% c("Ammonia (Phys-Chem)", 
                                            "Dissolved oxygen",
                                            "Temperature",
                                            "Phosphate",
                                            "Ammonia (Annex 8)"
                                            )) %>% 
               # filter(hydromorph == "not designated artificial or heavily modified") %>%  # I think we should still consider A/HMWBs
                group_by(PRESSURE_NAME_1) %>% 
                filter(Date == sort(Date)[length(sort(Date))]) %>%   # We want the most recent creation date for each pressure
                ungroup() 


library(DT)
library(htmlwidgets)

DT::datatable(RNAG[,c(1, 11:32)],
          class = 'cell-border stripe',
          caption = 'Use the map below to find a waterbody and use the table search function to find its records',
          options = list(dom = 'Blfrtip', buttons = 'copy')
              ) 
            

```

### RNAGs map

RNAGs for Phys-Chemical Quality Elements are displayed in the map below, they are filtered to show the most recent RNAGs, those which are opaque are \>5 years old and have a creation date of 1st January 2019. This surpasses the national KPI as it is four months ahead of the KPI target of 1st April 2019.

*Need to think of a way to visualise wbs with multiple Phys-Chem RNAGS as this seems to be more common than ecological quality RNAGS*

```{r Phys Chem RNAG Map}

       leaflet() %>% 
  addProviderTiles(providers$Esri) %>% 
    addPolygons(data=CAT_Union,
                        color="black",
                       weight = 2,
                       opacity = 0.99,
                       fillColor = NA,
                       fillOpacity = 0.00001
                  ) %>% 
    addPolygons(data=RNAG,
              color = "black",
              weight = 0.5,
              fillOpacity = ~ifelse(RNAG$Date < as.Date("2019-01-01"), 0.2, 0.99),
              fillColor = ~pal(RNAG$CLASSIFICATION_NAME),
              popup= paste0("RNAG Created: ",RNAG$Date, "<br>",
                            "Element: ", RNAG$CLASS_ITEM_NAME, "<br>",
                            "WB: ",RNAG$WB_NAME, "<br> Pressure 1: ",
                            RNAG$PRESSURE_NAME_1,
                            "<br> Pressure 2: ",
                            RNAG$PRESSURE_NAME_2,
                            "<br> RFF Action Name: " ,
                            RNAG$RFF_ACTION_NAME),
              group = "Invertebrates RNAGs")%>% 
                addLegend(opacity = 0.9, 
                         pal = pal,
                         values = RNAG$CLASSIFICATION_NAME,
                         title = "RNAG by Phys-Chem Quality Element") 
```

# Measures Visualisation

*still to come*

# WFD map for Phosphates/ Nitrates/ DO

*still to come*

It might be that this is better before RNAGs map.

Focus on Orthophosphates, Ammonical Nitrogen, TSS/TDS solids, pH, conductivity. Present a violin plot for all monitoring points in a catchment, so we can see which monitoring sites have high values. Do as dashboard so can link violin plot by a click to a location on a map?

### WIMS data

Here we select a few physio-chemical elements, these although taditionally used for WFD WQ monitoring, are only a cross section. They don't include emerging chemicals such as caffeine, paracetamol etc which act as endocrine distruptors. These are partly covered by priority substances or not monitored for at all.

There is also no comment on the impact of multiple contaminants in combination and the formation of chemical cocktails. The closest we can get is, the presence of the determinants below can infer the presence of other contaminants. 

### Orthophosphate (PO4-P)
#### Upper Catchment

We filter by WQ.

```{r load in WIMS data}
# This needs to be scheduled on databricks as too heavy to lift in app.

   WIMS <-  read.csv("/dbfs/mnt/lab/unrestricted/harry.gray@environment-agency.gov.uk/CEP/ETL_Exports/WIMS_Most_Recent.csv")

# All the col names are shifted one to the left.
  names(WIMS)[1:(ncol(WIMS)-1)] <- names(WIMS)[2:ncol(WIMS)]
  
  WIMS %<>% select(-ncol(.)) %>% 
            filter(OPCAT_NAME == unique(CAT$OPCAT_NAME))
  
  WIMS_p <- WIMS %>% filter(
                                determinand.definition == "Orthophosphate, reactive as P" &
                                  result < 200 & result >=0.3 
                                 ) %>% 
                    group_by(sample.samplingPoint.label) %>% 
                    mutate(Mean_P = mean(result),
                           Mean_count = n(),
                           sample.sampleDateTime = lubridate::ymd_hms(sample.sampleDateTime),
                           Date= as.Date(sample.sampleDateTime)) %>% 
                    ungroup()
  
  WIMS_am <- WIMS %>% filter(
                                determinand.definition== "NH3 un-ion" &
                                  result < 20
                                 )
  
  #### Lets work out which catchments we want to classify as upper and lower catchment
  
  
```

```{r}
# Leaflet map

library(wesanderson)


# Define log-scaled bins for numeric data
binz <-c(0,0.05,0.1,0.2,0.5,1,2,5,10,Inf)

# Create a color palette using colorBin for numeric data
pal_p <- colorBin(palette = "plasma", domain = WIMS_p$result, bins = binz)

 leaflet() %>%
      addProviderTiles(providers$Esri, group="Esri") %>% 
       addPolygons(data=CAT,
                        fillColor = NA,
                        fillOpacity = 0.00001,
                        color = "black",
                        opacity = 0.8,
                        popup = CAT$WB_NAME,
                        group="Sub-catchments") %>% 
      addPolygons(data=CAT_Union,
                  fillOpacity = 0.0001,
                  fillColor = NA,
                  color = "black") %>% 
      addCircles(
        data=WIMS_p,
        lng = ~long, 
        lat = ~lat, 
        radius = 9, 
        color = ~pal_p(result),
        popup = ~paste0("Site: ", WIMS_p$sample.samplingPoint.label, "<br> Mean PO4-P (mg/L): ", WIMS_p$result, "<br> Sample Count: ", WIMS_p$Mean_count,
                        "<br> from/to: ",
                        min(WIMS_p$Date), "/", max(WIMS_p$Date))
                      ) %>% 
       addPolylines(data=DRN, col="#2832C2", weight=1, 
                   opacity = 0.5,
                   group="Detailed River Network") %>%
      addLegend("bottomleft", pal = pal_p, values = range(WIMS_p$result), title = "Mean Orthophosphate") %>% 
              addScaleBar()  %>% 
        addLayersControl(baseGroups = c("Esri","Blank Basemap"), 
                       overlayGroups = c("Detailed River Network",
                                         "Sub-catchments"),
                       position="topright",
                       options=layersControlOptions(collapsed=FALSE)) %>% 
      hideGroup(c("Detailed River Network", "Sub-catchments")) #prevents the layer from appearing by default when you load up.

```

```{r}

# Violin plot
#ggplot(WIMS_p, aes(x = version, y = X)) +
 # geom_violin(aes(fill = version), color = "black", alpha = 0.5) +  # Violin plot with some transparency
#  geom_boxplot(width = 0.2, color = "black", aes(fill = version), alpha = 0.7) +  # Boxplot on top
  # geom_text(aes(x = WB_NAME, y = -Inf, label = paste("Count: ", count)), vjust = -0.5, hjust = 0.5, size = 4) +  # Add counts below the x-axis if available
 # labs(title = "Orthophosphate Distribution by WB", x = "Waterbody", y = "PO4-P mg/L") +
#  scale_y_continuous(limits = c(0,20), breaks = c(0,0.1,0.2,0.3,0.5,1,5,10,20)) + 
 # geom_hline(yintercept = 0.3, col = "red")+
  #geom_hline(yintercept = 0.1, col = "green")+# Adjust the y-axis limits as needed
#  theme_minimal() +  # Use a minimal theme for a cleaner look
 # theme(legend.position = "none", axis.text.x = element_text(angle=90, size=9))  # Remove the legend


a <- ggplot(WIMS_p, aes(x= WB_NAME, y=result, col=result))+
  geom_point()+theme(axis.text.x = element_text(angle=90, size=5))+labs(y= "PO4-P", x= "Waterbodies")

plotly::ggplotly(a)


```
### Wessex Water sewage discharge map

```{r}
library(rnrfa) # This package converts our horrible ST121324 grid references to BNG easting and northing which we can then convert to WGS84!

sewage <- read.csv("/dbfs/FileStore/WSX_HGray/WxW_2020_2022_storm_overflow_annual_report.csv", skip=1)

sewage$Outlet.Discharge.National.Grid.Reference <-  gsub("n/a","", sewage$Outlet.Discharge.National.Grid.Reference, fixed=T) #remove any bullsewage

sewage <- subset(sewage,!(Initial.monitoring.commission.date=="EDM to be installed by December 2023")) #remove discharge points which don't have EDMs.                                                                                               # This removes about 100 points.

XO <- osg_parse(sewage$Outlet.Discharge.National.Grid.Reference) # convert your oldschool national grid references

sewage$East <- XO[[1]]
sewage$North <- XO[[2]]

#check if any rows have no grid reference

#Convert sewage to sf

X <-    sewage %>% st_as_sf(coords= c("East", "North"), crs=27700) %>% 
            st_transform(4326)#
         
# Crop sf
         
sewage <- X[CAT,]
         
         #%>%
        wgs84 <- sewage %>% st_coordinates() %>%
              as_tibble() 

        
sewage$lat <- wgs84$Y
sewage$long <- wgs84$X     

      

```

```{r, echo=FALSE, warning=FALSE, message=FALSE}
# We now have a dataset for hourly spills within 2022 which is linked to locations. 

library(leaflet.extras)

#Load in files
  DRN <- read_sf("/dbfs/mnt/lab/unrestricted/harry.gray@environment-agency.gov.uk/DRN/DRN_Merged_MCAT.shp")
  DRN <- DRN[CAT,]


  PAL <- colorNumeric("YlOrBr", domain = sewage$X2022.spill.count)
sequ <- seq(min(sewage$X2022.spill.count), max(sewage$X2022.spill.count), length.out = 5)

    leaflet() %>%
      addProviderTiles(providers$Esri, group="Esri") %>% 
       addPolygons(data=CAT,
                        fillColor = NA,
                        fillOpacity = 0.00001,
                        color = "black",
                        opacity = 0.8,
                        popup = CAT$WB_NAME,
                        group="Sub-catchments") %>% 
      addPolygons(data=CAT_Union,
                  fillOpacity = 0.0001,
                  fillColor = NA,
                  color = "black") %>% 
      addCircleMarkers(
        data=sewage,
        lng = ~long, 
        lat = ~lat, 
        radius = ~sqrt(X2022.spill.count), 
        color = ~PAL(X2022.spill.count),
        popup = ~paste0("Annual Spill Count (2022): ", as.character(X2022.spill.count), "<br> At site: ", Storm.Overflow.name)
                      ) %>% 
       addPolylines(data=DRN, col="#2832C2", weight=1, 
                   opacity = 0.5,
                   group="Detailed River Network") %>%
      addLegend("bottomleft", pal = PAL, values = sequ, title = "2022 Spill Count") %>% 
              addScaleBar()  %>% 
        addLayersControl(baseGroups = c("Esri","Blank Basemap"), 
                       overlayGroups = c("Detailed River Network",
                                         "Sub-catchments"),
                       position="topright",
                       options=layersControlOptions(collapsed=FALSE)) %>% 
      hideGroup(c("Detailed River Network", "Sub-catchments")) #prevents the layer from appearing by default when you load up.

```


*still to come*
