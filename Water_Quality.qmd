---
title: "Water Quality"
format:
  html:
    theme: flatly
    toc: true
    toc-location: right
    number-sections: false
    code-fold: false
    code-tools: false
    fig-cap: true
    callout-icon: false
---

::: callout-warning
## This page is under construction
:::

## Overall Physio-Chemical WFD

```{r setup, include=FALSE}
knitr::opts_chunk$set(message=FALSE,warning=FALSE, echo=FALSE, cache=TRUE)
```

```{css}
.dataTables_wrapper {
  max-height: 350px;
  overflow-y: auto;
}

.dataTables_wrapper table {
font-size: 11px;
}
```

```{r }
#| label: the general cps & cat

library(sf)
library(magrittr)
library(tidyverse)
library(leaflet)


source("Catch_Set_Up.R")
```

```{r}

# Load your data
CDE <- read.csv("/dbfs/mnt/lab/unrestricted/harry.gray@environment-agency.gov.uk/CEP/WFD_Wessex_2024.csv")

CDE %<>% 
  filter(Operational.Catchment == unique(CAT$OPCAT_NAME)) %>% 
  inner_join(CAT_geo, ., by = c("WB_ID" = "Water.Body.ID"))

# Define palette
pal <- colorFactor(
  palette = c("green", "seagreen", "seagreen", "yellow", "#c65102", "#b71105", "red"),
  levels = c("High", "Good", "Supports Good", "Moderate", "Bad", "Poor", "Fail"),
  na.color = "transparent"
)

# 2022 map
CDE_e_2022 <- CDE %>% 
  filter(Classification.Item == "Physio-Chemical Quality Elements" & 
         Year == sort(unique(CDE$Year), decreasing=TRUE)[1])

CDE_e_2019 <- CDE %>% 
  filter(Classification.Item == "Physio-Chemical Quality Elements" & 
         Year == "2019")

list <- unique(CDE[CDE$Classification.Item.Subgroup == "Physio-Chemical Quality Elements Group",]$Classification.Item)

```

Within the `r unique(CAT$OPCAT_NAME)`'s `r length(unique(CAT$WB_NAME))` individual EA waterbodies.

In the most recent WFD classification in `r sort(unique(CDE$Year), decreasing=TRUE)[1]`, `r round(sum(CDE_e_2022$Status == "Good")/length(unique(CAT$WB_NAME))*100, digits=0)`% of waterbodies scored "Good" for `r unique(CDE_e_2022$Classification.Item)`, whilst `r round(sum(CDE_e_2022$Status == "High")/length(unique(CAT$WB_NAME))*100, digits=0)`% of waterbodies scored "High".

In comparison the 2019 WFD classification saw: `r round(sum(CDE_e_2019$Status == "Good")/length(unique(CAT$WB_NAME))*100, digits=0)`% of waterbodies scored "Good" for `r unique(CDE_e_2019$Classification.Item)`, whilst `r round(sum(CDE_e_2019$Status == "High")/length(unique(CAT$WB_NAME))*100, digits=0)`% of waterbodies scored "High".

`r unique(CDE_e_2022$Classification.Item)` include the following items: 

- Ammonia (Phys-Chemical)
- Dissolved oxygen
- Temperature
- Biochemical Overall Oxygen Demand (BOD)
- Phosphate
- pH
- Acid Neutralising Capacity

```{r}
#| label: Ecological Overall CDE Map


# 2019 map


CDE_e_2015 <- CDE %>% 
  filter(Classification.Item == "Physio-Chemical Quality Elements" & 
         Year == "2015")

CDE_e <- CDE %>% 
         filter(Classification.Item == "Physio-Chemical Quality Elements" & 
         Year == c(2015, 2019, 2022))

         leaflet() %>% 
  addProviderTiles(providers$Esri,
                   group = "Esri Basemap") %>% 
   addPolygons(data= CDE_e_2015,
              color = "black",
              weight = 0.5,
              fillOpacity = 0.7,
              fillColor = ~pal(Status),
              popup= ~Water.Body,
              group= "2015 Status") %>% 
  addPolygons(data= CDE_e_2019,
              color = "black",
              weight = 0.5,
              fillOpacity = 0.7,
              fillColor = ~pal(Status),
              popup= ~Water.Body,
              group= "2019 Status") %>% 
  addPolygons(data= CDE_e_2022,
              color = "black",
              weight = 0.5,
              fillOpacity = 0.7,
              fillColor = ~pal(Status),
              popup= ~Water.Body,
              group = "2022 Status") %>% 
  addLegend(opacity = 0.9, 
            pal = pal,
            values = CDE_e_2022$Status,
            title = unique(CDE_e_2019$Classification.Item)) %>% 
  addLayersControl(baseGroups = c( "2022 Status",
              "2019 Status",
              "2015 Status"),
                   overlayGroups = c(
             "Esri Basemap"),
                   position = "topright",
                   options= layersControlOptions(collapsed=FALSE)) %>% 
  hideGroup(c("2019 Status",
              "2015 Status",
              "Esri Basemap"))



```

### Reasons for Not Acheiving Good

:::{.callout-tip}
Use the below 'Search' box to to search for a waterbody or classification element and scroll through RNAGs and Measures. Click the 'Excel' button to download a spreadsheet.
:::
:::{.column-body-outset}
```{r RNAGS datatable WQ}

RFF <- read.csv("/dbfs/FileStore/WSX_HGray/RFF.csv")
RFF <- RFF[RFF$OPERATIONAL_CATCHMENT %in% c("Poole Harbour Rivers","Poole Harbour Rivers TraC"),]


rnag1 <- RFF %>%  filter(OPERATIONAL_CATCHMENT %in% c("Poole Harbour Rivers TraC", "Poole Harbour Rivers") & 
                    PRESSURE_1 == "Nutrients")
rnag1_1 <- RFF %>%  filter(OPERATIONAL_CATCHMENT %in% c("Poole Harbour Rivers TraC", "Poole Harbour Rivers") & 
                            PRESSURE_2 %in% c("Phosphate","Nitrate (Dissolved Inorganic Nitrogen"))
rnag2 <- RFF %>% 
                
               filter(CLASS_ITEM_NAME %in% c("Ammonia (Phys-Chem)", 
                                            "Dissolved oxygen",
                                            "Temperature",
                                            "Phosphate",
                                            "Ammonia (Annex 8)",
                                            "pH",
                                            "Biochemical Overall Oxygen Demand (BOD)",
                                            "Mercury and Its Compounds",
                                            "Polybrominated diphenyl ethers (PBDE)"))%>% 
                       arrange(WATERBODY_ID)           # Arrange dataframe so it appears neater in DT


RNAG <- rbind(rnag1,rnag1_1, rnag2)

RNAG <- RNAG %>% rename(YEAR_RNAG_CREATED= CREATED_DATE,
                        WFD_YEAR = YEAR) %>% 
            distinct()
library(DT)
library(htmlwidgets)

DT::datatable(RNAG[,c(7, 6,18, 32, 16:17,19,20,22:30,23, 10,11,2)],
          class = 'cell-border stripe',
          extensions = c("Buttons","FixedColumns"),
          options = list(
            dom = 'Blfrtip',
            buttons = 'excel',
            initComplete = JS(
    "function(settings, json) {",
    "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});",
    "}"))
    )


```
:::

### Measures to Improve Waterbodies

:::{.column-body-outset}
```{r Measures WQ}
Measures_Class <- readxl::read_xlsx("/dbfs/FileStore/WSX_HGray/ETL_Imports_Require_Manual/Measures_Extraction_Tool_Extended.xlsx", sheet= "Measure Class Items", skip=2)  
Measures_WBs <- readxl::read_xlsx("/dbfs/FileStore/WSX_HGray/ETL_Imports_Require_Manual/Measures_Extraction_Tool_Extended.xlsx", sheet= "Connections to Water Bodies", skip=2)  %>% 
                        filter(AREA_NAME== "Wessex")
Measures_Cat <- readxl::read_xlsx("/dbfs/FileStore/WSX_HGray/ETL_Imports_Require_Manual/Measures_Extraction_Tool_Extended.xlsx", sheet= "Measure Categories", skip=2)  


CAT_Mini <- CAT %>% select(WB_NAME, WB_ID) %>% 
                    st_drop_geometry()


Mes <- Measures_WBs %>% filter(OPERATIONAL_CATCHMENT %in% c("Poole Harbour Rivers TraC", "Poole Harbour Rivers") &  WATERBODY_ID %in% unique(RNAG$WATERBODY_ID))
Mes_Categ <- inner_join(Mes, Measures_Cat, by = "ACTION_UID") %>% 
             inner_join(CAT_Mini, by = c("WATERBODY_ID" = "WB_ID")) %>% 
                arrange(WATERBODY_ID)




   DT::datatable(Mes_Categ[,c(16,3,10,12:14)],
          class = 'cell-border stripe',
          extensions = c("Buttons","FixedColumns"),
          options = list(
            dom = 'Blfrtip',
            buttons = 'excel',
            initComplete = JS(
    "function(settings, json) {",
    "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});",
    "}"))
    )
```
:::

```{r Phys Chem RNAG Map}

#       leaflet() %>% 
 # addProviderTiles(providers$Esri) %>% 
  #  addPolygons(data=CAT_Union,
   ##                     color="black",
     #                  weight = 2,
      ##                 opacity = 0.99,
         #              fillColor = NA,
        #               fillOpacity = 0.00001
          #        ) %>% 
#    addPolygons(data=RNAG,
 #             color = "black",
  #            weight = 0.5,
   #           fillOpacity = ~ifelse(RNAG$Date < as.Date("2019-01-01"), 0.2, 0.99),
    #          fillColor = ~pal(RNAG$CLASSIFICATION_NAME),
     #         popup= paste0("RNAG Created: ",RNAG$Date, "<br>",
#                            "Element: ", RNAG$CLASS_ITEM_NAME, "<br>",
 #                           "WB: ",RNAG$WB_NAME, "<br> Pressure 1: ",
  #                          RNAG$PRESSURE_NAME_1,
   #                         "<br> Pressure 2: ",
    ##                        RNAG$PRESSURE_NAME_2,
      #                      "<br> RFF Action Name: " ,
       #                     RNAG$RFF_ACTION_NAME),
        #      label = RNAG$WB_ID,
         #     group = "Invertebrates RNAGs")%>% 
          #      addLegend(opacity = 0.9, 
           #              pal = pal,
            #             values = RNAG$CLASSIFICATION_NAME,
             #            title = "RNAG by Phys-Chem Quality Element") 
```


```{r RNAG Measures}

#Meas_tbl <-  CPS_sf %>% filter("MEASURE_TIER1_NAME","MEASURE_TIER2_NAME", "MEASURE_TIER3_NAME")
#DT::datatable(CPS_sf[],
 #         class = 'cell-border stripe',
  #        caption = 'Use the map below to find a waterbody and use the table search function to find its records',
   #       options = list(dom = 'Blfrtip', buttons = 'copy')
    #          ) 
```

### WIMS data

Here we select a few physio-chemical elements, these although traditionally used for WFD WQ monitoring, are only a cross section. They don't include emerging chemicals such as caffeine, anti-depressants etc. These are partly covered by priority substances or not monitored for at all.

In order to give an overview of recent monitoring, the below pop-up plots show data from 2022 until current. 

::: {.callout-tip collapse="true"}
### Orthophosphate Plots

```{r load in WIMS data}
#| layout: full

# Load in WIMS for CAT
  source("WIMS_Transform_Script.R")

  # Lets filter to the last 5 years 

  WIMS_CAT %<>% filter(Year >= 2022) 
  
  
  WIMS_p <- WIMS_CAT %>% filter(
                                determinand.definition == "Orthophosphate, reactive as P") %>% 
                    group_by(sample.samplingPoint.label) %>% 
                    mutate(Mean_P = round(mean(result),2),
                           Mean_count = n()) %>% 
                    ungroup()
  
  WIMS_am <- WIMS_CAT %>% filter(
                                determinand.definition== "Ammoniacal Nitrogen as N"
                                 ) %>% 
                      group_by(sample.samplingPoint.label) %>% 
                      mutate(Mean_A = round(mean(result),2),
                             Mean_count = n())
  
   WIMS_DO <- WIMS_CAT %>% filter(
                                determinand.definition == "Oxygen, Dissolved, % Saturation") %>% 
                    group_by(sample.samplingPoint.label) %>% 
                    mutate(Mean_DO = round(mean(result),2),
                           Mean_count = n()) %>% 
                    ungroup()
   
    WIMS_BOD <- WIMS_CAT %>% filter(
                                determinand.definition == "BOD : 5 Day ATU") %>% 
                    group_by(sample.samplingPoint.label) %>% 
                    mutate(BOD_90th = round(quantile(result, probs = 0.9, na.rm=TRUE),2),
                           Quantile_count = n()) %>% 
                    ungroup()
    
      WIMS_NTU <- WIMS_CAT %>% filter(
                                  determinand.definition == "Turbidity") %>% 
                      group_by(sample.samplingPoint.label) %>% 
                      mutate(Mean_NTU = round(mean(result),2),
                             Mean_count = n()) %>% 
                      ungroup()
   
    
```

Orthophosphate reactive as P (PO4-P) monitoring sites are grouped together per waterbody within the catchment in the plot shown below. Horizontal lines indicate "poor" and "good" WFD site classifications. Mean sample orthophosphate readings are shown for individual monitoring sites in the map below. Both plots show results from 2022-2024.

```{r violin plots of WIMS OrthoPhos}

# Violin plot
v <- ggplot(WIMS_p, aes(x = WB_NAME, y = result)) +
 # geom_violin(aes(fill = WB_NAME), color = "black", alpha = 0.5) +  # Violin plot with some transparency
  geom_boxplot(width = 0.05, color = "black", aes(fill = WB_NAME), alpha = 0.7) +  # Boxplot on top
   geom_text(aes(x = WB_NAME, y = -Inf, label = paste("Count: ", Mean_count)), vjust = -0.5, hjust = 0.5, size = 4) +  # Add counts below the x-axis if available
  labs(title = "Orthophosphate Distribution by WB", x = "Waterbody", y = "Orthophosphate (mg/L)") +
  #scale_y_continuous(limits = c(0,20), breaks = c(0,0.1,0.2,0.3,0.5,1)) + 
  geom_hline(yintercept = 0.3, col = "red")+ # this is wfd poor
  geom_hline(yintercept = 0.1, col = "green")+# this is wfd good
  theme_minimal() +  # Use a minimal theme for a cleaner look
  theme(legend.position = "none", axis.text.x = element_text(angle=45, size=9)) +
  labs(caption = "WFD Orthophosphate Reactive P, good and poor indicated by horizontal lines")+
  coord_flip()

#a <- ggplot(WIMS_p, aes(x= WB_NAME, y=result, col=result))+
#  geom_point()+theme(axis.text.x = element_text(angle=90, size=5))+labs(y= "Orthophosphate (mg/L)", x= "Waterbodies")




# Add the caption manually using layout
plotly::ggplotly(v)  %>%
  plotly::layout(
    annotations = list(
      x = 0.5,  # Horizontal center
      y = -5,  # Position below the plot
      text = "WFD Orthophosphate Reactive P, good and poor indicated by horizontal lines",
      showarrow = FALSE,
      xref = "paper",
      yref = "paper",
      font = list(size = 12)  # Adjust the font size if needed
    )
  )

```

```{r Orthophos maps}
library(rnrfa) # This package converts our horrible ST121324 grid references to BNG easting and northing which we can then convert to WGS84!

sewage <- read.csv("/dbfs/FileStore/WSX_HGray/WxW_2020_2022_storm_overflow_annual_report.csv", skip=1)

sewage$Outlet.Discharge.National.Grid.Reference <-  gsub("n/a","", sewage$Outlet.Discharge.National.Grid.Reference, fixed=T) #remove any bullsewage

sewage <- subset(sewage,!(Initial.monitoring.commission.date=="EDM to be installed by December 2023")) #remove discharge points which don't have EDMs.                                                                                               # This removes about 100 points.

XO <- osg_parse(sewage$Outlet.Discharge.National.Grid.Reference) # convert your oldschool national grid references

sewage$East <- XO[[1]]
sewage$North <- XO[[2]]

#check if any rows have no grid reference

#Convert sewage to sf

X <-    sewage %>% st_as_sf(coords= c("East", "North"), crs=27700) %>% 
            st_transform(4326)#
         
# Crop sf
         
sewage <- X[CAT,]
         
         #%>%
        wgs84 <- sewage %>% st_coordinates() %>%
              as_tibble() 

        
sewage$lat <- wgs84$Y
sewage$long <- wgs84$X     

      


# We now have a dataset for hourly spills within 2022 which is linked to locations. 

library(leaflet.extras)

#Load in files
  DRN <- read_sf("/dbfs/mnt/lab/unrestricted/harry.gray@environment-agency.gov.uk/DRN/DRN_Merged_MCAT.shp")
  DRN <- DRN[CAT,]
  
  # Leaflet map

# Define log-scaled bins for numeric data
binz <-c(0,0.05,0.1,0.2,0.5,1,2,5,10,Inf)

# Create a color palette using colorBin for numeric data
pal_p <- colorBin(palette = "plasma", domain = WIMS_p$result, bins = binz, reverse=TRUE )
  
PAL <- colorNumeric("YlOrBr", domain = sewage$X2022.spill.count)
sequ <- seq(min(sewage$X2022.spill.count), max(sewage$X2022.spill.count), length.out = 5)

    leaflet() %>%
      addProviderTiles(providers$Esri, group="Esri") %>% 
       addPolygons(data=CAT,
                        fillColor = NA,
                        fillOpacity = 0.00001,
                        color = "black",
                        opacity = 0.8,
                        popup = CAT$WB_NAME,
                        group="Sub-catchments") %>% 
      addPolygons(data=CAT_Union,
                  fillOpacity = 0.0001,
                  fillColor = NA,
                  color = "black") %>% 
      addPolylines(data=DRN, col="#2832C2", weight=1, 
                         opacity = 0.5) %>%
      addCircleMarkers(
                      data=WIMS_p,
                      radius = 10,
                      color = "black",
                      weight = 1,
                      fillColor = ~pal_p(Mean_P),
                      popup = ~paste0("Site: ", WIMS_p$sample.samplingPoint.label, "<br> Mean PO4-P (mg/L): ", WIMS_p$Mean_P, "<br> Sample Count: ", WIMS_p$Mean_count,
                                      "<br> from/to: ",
                                      min(WIMS_p$Date), "/", max(WIMS_p$Date)),
                      group = "PO4-P"
                                    ) %>% 
      
      addCircleMarkers(
                      data=sewage,
                      lat= ~lat,
                      lng= ~long,
                      radius = ~(sqrt(X2022.spill.count)+5), 
                      color = "black",
                      weight = 1,
                      fillColor = ~PAL(X2022.spill.count),
                      fillOpacity = 1,
                      popup = ~paste0("Annual Spill Count (2022): ", as.character(X2022.spill.count), "<br> At site: ", Storm.Overflow.name),
                      group= "WxW CSO Sewage Discharge Points"
                                    ) %>% 
       addPolylines(data=DRN, col="#2832C2", weight=1, 
                     opacity = 0.5,
                     group="Detailed River Network") %>%
       addLegend("bottomleft", 
                      pal = pal_p, 
                      values = binz, 
                      title = "WIMS Sites PO4-P",
                      group = "PO4-P") %>% 
       addLegend("bottomright", 
                pal = PAL, 
                      values = sequ, 
                      title = "Sewage Discharge <br> Total Hrs 2022",
                      group = "WxW CSO Sewage Discharge Points") %>% 
                    addScaleBar()  %>% 
       addLayersControl(baseGroups = c("Esri","Blank Basemap"), 
                       overlayGroups = c(
                                         "Sub-catchments",
                                         "PO4-P",
                                         "WxW CSO Sewage Discharge Points"),
                       position="topright",
                       options=layersControlOptions(collapsed=FALSE)) %>% 
       hideGroup(c( 
                  "Sub-catchments",
                  "WxW CSO Sewage Discharge Points"))

```
:::

::: {.callout-tip collapse="true"}
## Ammonia Plots

Nitrates are primarily introduced into freshwater through agricultural runoff, wastewater discharge and septic tanks. Excess nitrates lead to algal blooms, low oxygen levels. Nitrites are typically present in smaller quantities than nitrates, although they are more toxic to aquatic organisms than nitrates. Nitrities are unstable and convert between ammonia and nitrate.

Ammonia is highly toxic to fish and aquatic organisms, it becomes more toxic at higher pH and water temperatures.

```{r Ammonia violin plot}

# Violin plot
v <- ggplot(WIMS_am, aes(x = WB_NAME, y = result)) +
 # geom_violin(aes(fill = WB_NAME), color = "black", alpha = 0.5) +  # Violin plot with some transparency
  geom_boxplot(width = 0.05, color = "black", aes(fill = WB_NAME), alpha = 0.7) +  # Boxplot on top
   geom_text(aes(x = WB_NAME, y = -Inf, label = paste("Count: ", Mean_count)), vjust = -0.5, hjust = 0.5, size = 4) +  
  labs(title = "Ammoniacal Nitrogen as N Distribution by WB", x = "Waterbody", y = "NH3 (mg/L)") +
  #scale_y_continuous(limits = c(0,20), breaks = c(0,0.1,0.2,0.3,0.5,1)) + 
  geom_hline(yintercept = 0.6, col = "green")+ # this is wfd good for lowland & high alkalinity river
  geom_hline(yintercept = 2.5, col = "red")+# this is wfd poor for lowland & high alkalinity river
  theme_minimal() +  
  theme(legend.position = "none", axis.text.x = element_text(angle=90, size=9)) +
  labs(caption = "WFD NH3, good and poor indicated by horizontal lines")+
  coord_flip()

#a <- ggplot(WIMS_p, aes(x= WB_NAME, y=result, col=result))+
#  geom_point()+theme(axis.text.x = element_text(angle=90, size=5))+labs(y= "Orthophosphate (mg/L)", x= "Waterbodies")

plotly::ggplotly(v) 


```


```{r Ammonia leaflet map}

binsss= c(0,0.3,0.6,1.1,2,3,Inf)
pal_am <- colorBin(palette = "plasma", domain = WIMS_am$result, bins = binsss, reverse=TRUE )


leaflet() %>%
      addProviderTiles(providers$Esri, group="Esri") %>% 
       addPolygons(data=CAT,
                        fillColor = NA,
                        fillOpacity = 0.00001,
                        color = "black",
                        opacity = 0.8,
                        popup = CAT$WB_NAME,
                        group="Sub-catchments") %>% 
       addPolygons(data=CAT_Union,
                  fillOpacity = 0.0001,
                  fillColor = NA,
                  color = "black") %>% 
       addPolylines(data=DRN, 
                    col="steelblue", 
                    weight=1, 
                    opacity = 0.5
                         ) %>%
       addCircleMarkers(
                      data=WIMS_am,
                      radius = 10,
                      color = "black",
                      weight = 1,
                      fillColor = ~pal_am(Mean_A),
                      popup = ~paste0("Site: ", WIMS_p$sample.samplingPoint.label, "<br> Mean PO4-P (mg/L): ", WIMS_am$Mean_A, "<br> Sample Count: ", WIMS_am$Mean_count,
                                      "<br> from/to: ",
                                      min(WIMS_am$Date), " / ", max(WIMS_am$Date)),
                      group = "NH3"
                                    ) %>% 
       addLegend("bottomleft", 
                      pal = pal_am, 
                      values = binsss, 
                      title = "WIMS Sites NH3",
                      group = "Ammon_Legend") %>% 
                    addScaleBar()  %>% 
       addLayersControl(baseGroups = c("Esri","Blank Basemap"), 
                       overlayGroups = c(
                                         "Sub-catchments",
                                         "NH3"),
                       position="topright",
                       options=layersControlOptions(collapsed=FALSE)) %>% 
       hideGroup(c(
                  "Sub-catchments"))



```
:::

::: {.callout-tip collapse="true"}
## Dissolved Oxygen Plots

```{r DO Plots}

# Violin plot
v <- ggplot(WIMS_DO, aes(x = WB_NAME, y = result)) +
 # geom_violin(aes(fill = WB_NAME), color = "black", alpha = 0.5) +  # Violin plot with some transparency
  geom_boxplot(width = 0.05, color = "black", aes(fill = WB_NAME), alpha = 0.7) +  # Boxplot on top
   geom_text(aes(x = WB_NAME, y = -Inf, label = paste("Count: ", Mean_count)), vjust = -0.5, hjust = 0.5, size = 4) +  
  labs(title = "Dissolved Oxygen (% Sat) Distribution by WB", x = "Waterbody", y = "DO (% Saturation)") +
  #scale_y_continuous(limits = c(0,20), breaks = c(0,0.1,0.2,0.3,0.5,1)) + 
  geom_hline(yintercept = 60, col = "green")+ # this is wfd good for lowland & high alkalinity river
  geom_hline(yintercept = 45, col = "red")+# this is wfd poor for lowland & high alkalinity river
  theme_minimal() +  
  theme(legend.position = "none", axis.text.x = element_text(angle=90, size=9)) +
  labs(caption = "WFD Good and Poor indicated by horizontal lines")+
  coord_flip()

plotly::ggplotly(v) 

```
WFD classifications for lowland, high alkalinity river which are salmonid river the standards for the upland, low alkalinity type will apply.

```{r DO leaflet map}

binsss= c(0,45,54,60,70,Inf)
pal_DO <- colorBin(palette = "plasma", domain = WIMS_DO$result, bins = binsss, reverse=FALSE )


leaflet() %>%
      addProviderTiles(providers$Esri, group="Esri") %>% 
       addPolygons(data=CAT,
                        fillColor = NA,
                        fillOpacity = 0.00001,
                        color = "black",
                        opacity = 0.8,
                        popup = CAT$WB_NAME,
                        group="Sub-catchments") %>% 
       addPolygons(data=CAT_Union,
                  fillOpacity = 0.0001,
                  fillColor = NA,
                  color = "black") %>% 
       addPolylines(data=DRN, 
                    col="steelblue", 
                    weight=1, 
                    opacity = 0.5
                         ) %>%
       addCircleMarkers(
                      data=WIMS_DO,
                      radius = 10,
                      color = "black",
                      weight = 1,
                      fillColor = ~pal_DO(Mean_DO),
                      popup = ~paste0("Site: ", WIMS_DO$sample.samplingPoint.label, "<br>  DO (% Sat) Mean: ", WIMS_DO$Mean_DO, "<br> Sample Count: ", WIMS_DO$Mean_count,
                                      "<br> from/to: ",
                                      min(WIMS_DO$Date), " / ", max(WIMS_DO$Date)),
                      group = "NH3"
                                    ) %>% 
       addLegend("bottomleft", 
                      pal = pal_DO, 
                      values = binsss, 
                      title = "WIMS Sites DO % Sat",
                      group = "Dissolved Oxygen") %>% 
                    addScaleBar()  %>% 
       addLayersControl(baseGroups = c("Esri","Blank Basemap"), 
                       overlayGroups = c(
                                         "Sub-catchments",
                                         "Dissolved Oxygen"),
                       position="topright",
                       options=layersControlOptions(collapsed=FALSE)) %>% 
       hideGroup(c(
                  "Sub-catchments"))



```
:::


::: {.callout-tip collapse="true"}
## BOD Plots
```{r BOD Plots}

# Violin plot
v <- ggplot(WIMS_BOD, aes(x = WB_NAME, y = result)) +
 # geom_violin(aes(fill = WB_NAME), color = "black", alpha = 0.5) +  # Violin plot with some transparency
  geom_boxplot(width = 0.05, color = "black", aes(fill = WB_NAME), alpha = 0.7) +  # Boxplot on top
   geom_text(aes(x = WB_NAME, y = -Inf, label = paste("Count: ", Quantile_count)), vjust = -0.5, hjust = 0.5, size = 4) +  
  labs(title = "Biological Oxygen Demand (BOD ATU) by WB", x = "Waterbody", y = "BOD ATU") +
  geom_hline(yintercept = 5, col = "green")+ # this is wfd good for lowland & high alkalinity river
  geom_hline(yintercept = 9, col = "red")+# this is wfd poor for lowland & high alkalinity river
  theme_minimal() +  
  theme(legend.position = "none", axis.text.x = element_text(angle=90, size=9)) +
  labs(caption = "WFD Good and Poor indicated by horizontal lines")+
  coord_flip()

plotly::ggplotly(v) 

```

```{r BOD leaflet map}

binsss= c(0,4,5,6.5,9,Inf)
pal_BOD <- colorBin(palette = "plasma", domain = WIMS_BOD$result, bins = binsss, reverse=T )


leaflet() %>%
      addProviderTiles(providers$Esri, group="Esri") %>% 
       addPolygons(data=CAT,
                        fillColor = NA,
                        fillOpacity = 0.00001,
                        color = "black",
                        opacity = 0.8,
                        popup = CAT$WB_NAME,
                        group="Sub-catchments") %>% 
       addPolygons(data=CAT_Union,
                  fillOpacity = 0.0001,
                  fillColor = NA,
                  color = "black") %>% 
       addPolylines(data=DRN, 
                    col="steelblue", 
                    weight=1, 
                    opacity = 0.5
                         ) %>%
       addCircleMarkers(
                      data=WIMS_BOD,
                      radius = 10,
                      color = "black",
                      weight = 1,
                      fillColor = ~pal_DO(BOD_90th),
                      popup = ~paste0("Site: ", WIMS_BOD$sample.samplingPoint.label, "<br>  BOD (ATU) 90th percentile: ", WIMS_BOD$BOD_90th, "<br> Sample Count: ", WIMS_BOD$Quantile_count,
                                      "<br> from/to: ",
                                      min(WIMS_BOD$Date), " / ", max(WIMS_BOD$Date)),
                      group = "Biological Oxygen Demand"
                                    ) %>% 
       addLegend("bottomleft", 
                      pal = pal_BOD, 
                      values = binsss, 
                      title = "WIMS Sites BOD ATU",
                      group = "Biological Oxygen Demand") %>% 
                    addScaleBar()  %>% 
       addLayersControl(baseGroups = c("Esri","Blank Basemap"), 
                       overlayGroups = c(
                                         "Sub-catchments"),
                       position="topright",
                       options=layersControlOptions(collapsed=FALSE)) %>% 
       hideGroup(c(
                  "Sub-catchments"))



```

:::



### Third Party Data

This initial evidence pack doesn't include any water quality Water Company data, only citizen science data taken directly from the Angling Trust's [water quality monitoring scheme](https://anglingtrust.net/wp-content/uploads/2022/12/Water-Quality-Monitoring-Network-Viewers-Pack-v2-FINAL-09.12.2022.pdf) (currently one of the easiest national Citizen Science schemes to get WQ data from). Third-parties often have a different or un-aligned monitoring agenda to the Environment Agency. Eventually through influence, priorities can be aligned however, initially data may not be exactly where the EA would require it.

```{r WQ Cit Sci Data}

  CitSciWQ <- read.csv("/dbfs/mnt/lab/unrestricted/harry.gray@environment-agency.gov.uk/ETL_Exports/ATWQMN_Cit_Sci_Update.csv")

# Filter and convert to sf
  CSWQ_sf <- CitSciWQ %>% filter(!is.na(Longitude) &!is.na(Latitude)) %>% 
              st_as_sf(coords=c("Longitude","Latitude"), crs=4326)
  
  # Re-apply the lat/lng coords to the df
               wgs <- CSWQ_sf %>% st_coordinates() %>%
                          as_tibble() 
               
              CSWQ_sf$lat <- wgs$Y
              CSWQ_sf$long <- wgs$X  
              
# Crop to catchment in question
  df <- CSWQ_sf[CAT,]

# Enter an if statement in case we don't have any data in our catchment   
  unique_count <- length(unique(df$Site_Name))

      if (unique_count >= 3) {
      
        pal_CS <- colorBin(palette = "plasma", domain=df$Mean_Nitrate, 
                       bins = c(0,0.5,1,2,3,4,5,10,15,20,Inf))
      
      
      # Count number of measurements at site for phosphate 
      df %<>%
          mutate(Date = as.Date(Date)) %>% 
          group_by(Site_Name, Phos_ppm) %>% 
        mutate(C = n()) %>% 
        ungroup()
      
      #Plot mean nitrate on a map, experimental so only covers an arbitrary timespan
      
            leaflet() %>% 
              addProviderTiles(providers$Esri) %>% 
               addPolygons(data=CAT, 
                          label = ~WB_NAME, 
                          fill=NA,
                          color = "black",
                          weight = 2) %>% 
              addPolylines(data = DRN, 
                           color = "steelblue",
                           opacity = 1,
                           weight = 1.4) %>% 
              addCircleMarkers(data= df,
                               lat = ~lat,
                               lng = ~long,
                               fillColor = ~pal_CS(Mean_Nitrate), 
                               color = "black",
                               weight = 0.1,
                               radius=10, 
                               opacity = 1,
                               popup = paste0("Site: ",df$Site_Name,"<br> ",
                                              "Mean Nitrate (ppm): ",df$Mean_Nitrate,
                                              "<br> Collected at: ", df$created_at,
                                              "<br> Mean sample count: ", df$C,
                                              "<br> <b>Site Photo<b> <br>",
                               "<img src='", df$`X_Please_add_a_phot`, "' width='200' height='150'>")
                                              ) %>% 
              addLegend(pal = pal_CS, values = df$Mean_Nitrate, opacity = 0.7,
                        title="Mean Nitrate (ppm)") %>% 
              addControl(paste0("Mean Nitrate (ppm) from ", range(df$Date)[1], " to ", 
                                range(df$Date)[2]),
                         position = "bottomleft")
   } else{
          print(paste0("The ", unique(CAT$OPCAT_NAME), " does not have any monitoring data collected in the Angling Trust's Water Quality Monitoring scheme to display"))
        }

```
